<?xml version='1.0' encoding='UTF-8'?>
<sch:schema xmlns:sch='http://purl.oclc.org/dsdl/schematron'>
  <sch:ns uri='http://hpxmlonline.com/2019/10' prefix='h'/>
  <sch:pattern>
    <sch:rule context='//h:XMLTransactionHeaderInformation'/>
    <sch:rule context='//h:ContractorSystemIdentifiers'/>
    <sch:rule context='//h:extension'/>
    <sch:rule context='//h:ProjectStatus'/>
    <sch:rule context='//h:UtilityFuelProvider'/>
    <sch:rule context='//h:CoolingSystemInfo'/>
    <sch:rule context='//h:HeatPumpInfo'/>
    <sch:rule context='//h:HeatingSystemInfo'/>
    <sch:rule context='//h:SoftwareInfo'/>
    <sch:rule context='//h:AttachedToSpace'/>
    <sch:rule context='//h:AttachedToZone'/>
    <sch:rule context='//h:BuildingSystemIdentifiers'/>
    <sch:rule context='//h:Associations'/>
    <sch:rule context='//h:SystemIdentifiersInfo'/>
    <sch:rule context='//h:ExternalResource'/>
    <sch:rule context='//h:ConnectedDevice'/>
    <sch:rule context='//h:XMLTransactionHeaderInformation/h:XMLType'/>
    <sch:rule context='//h:XMLTransactionHeaderInformation/h:XMLGeneratedBy'/>
    <sch:rule context='//h:XMLTransactionHeaderInformation/h:CreatedDateAndTime'/>
    <sch:rule context='//h:XMLTransactionHeaderInformation/h:Transaction'>
      <sch:assert role='ERROR' test='contains(&quot;_create_ _update_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'create or update'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:XMLTransactionHeaderInformation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:AddressType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_street_ _mailing_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'street or mailing'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:Address1'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:Address2'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:CityMunicipality'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:StateCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:ZipCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation/h:USPSBarCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AddressInformation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SystemIdentifiersInfoType/h:SendingSystemIdentifierType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SystemIdentifiersInfoType/h:SendingSystemIdentifierValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SystemIdentifiersInfoType/h:ReceivingSystemIdentifierType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SystemIdentifiersInfoType/h:ReceivingSystemIdentifierValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RemoteReference/h:SendingSystemIdentifierType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RemoteReference/h:SendingSystemIdentifierValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RemoteReference/h:ReceivingSystemIdentifierType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RemoteReference/h:ReceivingSystemIdentifierValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ContractorSystemIdentifiers'/>
    <sch:rule context='//h:ProjectStatus/h:EventType'>
      <sch:assert role='ERROR' test='contains(&quot;_audit_ _proposed workscope_ _approved workscope_ _construction-period testing/daily test out_ _job completion testing/final inspection_ _quality assurance/monitoring_ _preconstruction_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'audit or proposed workscope or approved workscope or construction-period testing/daily test out or job completion testing/final inspection or quality assurance/monitoring or preconstruction'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ProjectStatus/h:Date'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectStatus'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Name'/>
    <sch:rule context='//h:IndividualInfo/h:IndividualType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_owner-occupant_ _owner-non-occupant_ _property manager_ _real estate agent_ _tenant_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'owner-occupant or owner-non-occupant or property manager or real estate agent or tenant or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Telephone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Email'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Name/h:PrefixName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Name/h:FirstName'/>
    <sch:rule context='//h:IndividualInfo/h:Name/h:MiddleName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Name/h:LastName'/>
    <sch:rule context='//h:IndividualInfo/h:Name/h:SuffixName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IndividualInfo/h:Name'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:UtilityName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:MeterNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:UtilityAccountNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:Permission'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:UtilityServiceTypeProvided'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _water_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or water or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:BusinessInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider/h:BusinessContactInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:UtilityFuelProvider'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IECCClimateZoneType/h:Year'>
      <sch:assert role='ERROR' test='contains(&quot;_2012_ _2009_ _2006_ _2003_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '2012 or 2009 or 2006 or 2003'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:IECCClimateZoneType/h:ClimateZone'>
      <sch:assert role='ERROR' test='contains(&quot;_1A_ _1B_ _1C_ _2A_ _2B_ _2C_ _3A_ _3B_ _3C_ _4A_ _4B_ _4C_ _5A_ _5B_ _5C_ _6A_ _6B_ _6C_ _7_ _8_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '1A or 1B or 1C or 2A or 2B or 2C or 3A or 3B or 3C or 4A or 4B or 4C or 5A or 5B or 5C or 6A or 6B or 6C or 7 or 8'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:IECCClimateZoneType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationMaterial/h:Batt'>
      <sch:assert role='ERROR' test='contains(&quot;_fiberglass_ _rockwool_ _recycled cotton_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'fiberglass or rockwool or recycled cotton or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationMaterial/h:LooseFill'>
      <sch:assert role='ERROR' test='contains(&quot;_cellulose_ _fiberglass_ _rockwool_ _vermiculite_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'cellulose or fiberglass or rockwool or vermiculite or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationMaterial/h:Rigid'>
      <sch:assert role='ERROR' test='contains(&quot;_polyisocyanurate_ _xps_ _eps_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'polyisocyanurate or xps or eps or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationMaterial/h:SprayFoam'>
      <sch:assert role='ERROR' test='contains(&quot;_open cell_ _closed cell_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'open cell or closed cell or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationMaterial/h:Other'/>
    <sch:rule context='//h:InsulationMaterial/h:None'/>
    <sch:rule context='//h:InsulationMaterial/h:Unknown'/>
    <sch:rule context='//h:InsulationInfo/h:InsulationGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:InsulationCondition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_good_ _fair_ _poor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'good or fair or poor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:AssemblyEffectiveRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:MisalignedInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer/h:InstallationType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_cavity_ _continuous_ _continuous - interior_ _continuous - exterior_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'cavity or continuous or continuous - interior or continuous - exterior'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer/h:InsulationMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer/h:NominalRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:InsulationInfo/h:Layer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:NumberofUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:AHRINumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:ModelYear'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:IsSharedAppliance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ApplianceTypeSummaryInfo/h:NumberofUnitsServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_dryer_ _all-in-one combination washer/dryer_ _unitized/stacked washer-dryer pair_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'dryer or all-in-one combination washer/dryer or unitized/stacked washer-dryer pair'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _laundry room_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or laundry room or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:FuelType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:Usage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:CombinedEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType/h:ControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_timer_ _moisture_ _temperature_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'timer or moisture or temperature'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesDryerInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_top loader_ _front loader_ _all-in-one combination washer/dryer_ _unitized/stacked washer-dryer pair_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'top loader or front loader or all-in-one combination washer/dryer or unitized/stacked washer-dryer pair'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _laundry room_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or laundry room or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:ModifiedEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:IntegratedModifiedEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:WaterFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:IntegratedWaterFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:Usage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:RatedAnnualkWh'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:LabelElectricRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:LabelGasRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:LabelAnnualGasCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:LabelUsage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:Capacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ClothesWasherInfoType/h:AttachedToWaterHeatingSystem'/>
    <sch:rule context='//h:ClothesWasherInfoType/h:AttachedToHotWaterDistribution'/>
    <sch:rule context='//h:DishwasherInfoType/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_uncategorized_ _built-in under counter_ _portable_ _counter-top_ _single tank_ _conveyor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'uncategorized or built-in under counter or portable or counter-top or single tank or conveyor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or kitchen or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:Fuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:HeatDryDefaultOff'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:AuxillaryWaterHeaterDefaultOff'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:RatedAnnualkWh'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:RatedWaterGalPerCycle'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:PlaceSettingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:Usage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:LabelElectricRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:LabelGasRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:LabelAnnualGasCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:LabelUsage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DishwasherInfoType/h:AttachedToWaterHeatingSystem'/>
    <sch:rule context='//h:DishwasherInfoType/h:AttachedToHotWaterDistribution'/>
    <sch:rule context='//h:FreezerInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or kitchen or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:FreezerInfoType/h:RatedAnnualkWh'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FreezerInfoType/h:Configuration'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_uncategorized_ _manual defrost_ _frost free_ _walk-in_ _case_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'uncategorized or manual defrost or frost free or walk-in or case'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:FreezerInfoType/h:Volume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FreezerInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_side-by-side_ _top freezer_ _bottom freezer_ _single door_ _single door with freezer_ _full-size one door_ _full-size two doors_ _half or quarter size_ _walk-in_ _open case_ _closed case_ _uncategorized_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'side-by-side or top freezer or bottom freezer or single door or single door with freezer or full-size one door or full-size two doors or half or quarter size or walk-in or open case or closed case or uncategorized'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or kitchen or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:RatedAnnualkWh'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:PrimaryIndicator'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:Volume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:FreshVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType/h:FrozenVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:RefrigeratorInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_portable_ _whole-home_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'portable or whole-home'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_living space_ _basement_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'living space or basement or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Efficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Capacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:CaseVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:IntegratedEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:DehumidistatSetpoint'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Airflow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 3'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:FractionDehumidificationLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Airflow/h:FanSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low_ _medium_ _high_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low or medium or high'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DehumidifierInfoType/h:Airflow/h:Airflow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CookingRangeInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or kitchen or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CookingRangeInfoType/h:FuelType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CookingRangeInfoType/h:IsInduction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CookingRangeInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OvenInfoType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _basement - conditioned_ _basement - unconditioned_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _living space_ _other_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or basement - conditioned or basement - unconditioned or garage or garage - conditioned or garage - unconditioned or kitchen or living space or other or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:OvenInfoType/h:FuelType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:OvenInfoType/h:IsConvection'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OvenInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SoftwareInfo/h:SoftwareProgramUsed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SoftwareInfo/h:SoftwareProgramVersion'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SoftwareInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Owner'/>
    <sch:rule context='//h:BusinessContactType/h:Auditor'/>
    <sch:rule context='//h:BusinessContactType/h:Implementer'/>
    <sch:rule context='//h:BusinessContactType/h:Other'/>
    <sch:rule context='//h:BusinessContactType/h:Owner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Auditor/h:Qualification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_PE_ _CEM_ _BPI-BA_ _RESNET-Home Partner_ _RA_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'PE or CEM or BPI-BA or RESNET-Home Partner or RA or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Auditor/h:StateWhereQualificationHeld'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Auditor/h:YearsExperience'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Auditor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Implementer/h:Qualification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_PE_ _CEM_ _BPI-BA_ _BPI-MFBA_ _RESNET-Home Partner_ _RA_ _Refrigerating System Operating Engineer_ _High Pressure Boiler Operating Engineer_ _HEP - EA_ _HEP - QCI_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'PE or CEM or BPI-BA or BPI-MFBA or RESNET-Home Partner or RA or Refrigerating System Operating Engineer or High Pressure Boiler Operating Engineer or HEP - EA or HEP - QCI or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Implementer/h:StateWhereQualificationHeld'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Implementer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Other/h:Description'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ContractorType/h:BusinessInfo'/>
    <sch:rule context='//h:ContractorType/h:SubContractor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ContractorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space'/>
    <sch:rule context='//h:Spaces/h:Space/h:SpaceName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space/h:NumberOfBedrooms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space/h:FloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space/h:Volume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space/h:CeilingHeight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Spaces/h:Space'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Zones/h:Zone'/>
    <sch:rule context='//h:Zones/h:Zone/h:ZoneName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Zones/h:Zone/h:ZoneType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_conditioned_ _unconditioned_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'conditioned or unconditioned'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Zones/h:Zone/h:Spaces'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Zones/h:Zone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirInfiltrationMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing/h:Hours'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing/h:ComponentsAirSealed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing/h:ComponentsAirSealed/h:Attic'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic floor_ _top plates_ _kneewall transitions_ _plumbing wet walls_ _chimney/flue chases_ _recessed lights_ _attic access_ _dropped soffit_ _attic level transitions_ _mechanical chases_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic floor or top plates or kneewall transitions or plumbing wet walls or chimney/flue chases or recessed lights or attic access or dropped soffit or attic level transitions or mechanical chases or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing/h:ComponentsAirSealed/h:BasementCrawlspace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_plumbing penetrations_ _access_ _wiring penetrations_ _chimney/flue chase_ _mechanical chases_ _rim joists_ _windows and door_ _foundation service penetrations_ _cantilevers_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'plumbing penetrations or access or wiring penetrations or chimney/flue chase or mechanical chases or rim joists or windows and door or foundation service penetrations or cantilevers or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AirSealing/h:ComponentsAirSealed/h:LivingSpace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_home-garage connection_ _rim joists_ _baseboards_ _windows and door_ _plumbing penetrations_ _hvac registers_ _interior sheating voids_ _cantilevers_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'home-garage connection or rim joists or baseboards or windows and door or plumbing penetrations or hvac registers or interior sheating voids or cantilevers or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:AirInfiltration/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic'/>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AtticType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:VentilationRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:WithinInfiltrationVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AttachedToRoof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AttachedToWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AttachedToFrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Attics/h:Attic/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation'/>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:FoundationType'/>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:VentilationRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:ThermalBoundary'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_frame floor_ _foundation wall_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'frame floor or foundation wall'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:WithinInfiltrationVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AttachedToRimJoist'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AttachedToWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AttachedToFoundationWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AttachedToFrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AttachedToSlab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Foundations/h:Foundation/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage'/>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:GarageType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AttachedToRoof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AttachedToWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AttachedToFoundationWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AttachedToFrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AttachedToSlab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:GarageType/h:AttachedtoHouse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:GarageType/h:Vented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:GarageType/h:Conditioned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:GarageType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Garages/h:Garage/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof'/>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:RoofType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_shingles_ _slate or tile shingles_ _wood shingles or shakes_ _asphalt or fiberglass shingles_ _metal surfacing_ _expanded polystyrene sheathing_ _plastic/rubber/synthetic sheeting_ _concrete_ _cool roof_ _green roof_ _no one major type_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'shingles or slate or tile shingles or wood shingles or shakes or asphalt or fiberglass shingles or metal surfacing or expanded polystyrene sheathing or plastic/rubber/synthetic sheeting or concrete or cool roof or green roof or no one major type or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:RoofColor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_light_ _medium_ _medium dark_ _dark_ _reflective_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'light or medium or medium dark or dark or reflective'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:SolarAbsorptance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Emittance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Rafters'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:DeckType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_concrete_ _metal_ _wood_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'concrete or metal or wood or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Pitch'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:RadiantBarrier'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:RadiantBarrierLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_top side of truss under sheathing_ _below bottom chord of truss_ _attic floor_ _underside of rafters_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'top side of truss under sheathing or below bottom chord of truss or attic floor or underside of rafters or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:RadiantBarrierGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof/h:Insulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Roofs/h:Roof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist'/>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:ExteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Perimeter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Siding'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_wood siding_ _stucco_ _synthetic stucco_ _vinyl siding_ _aluminum siding_ _brick veneer_ _asbestos siding_ _fiber cement siding_ _composite shingle siding_ _masonite siding_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'wood siding or stucco or synthetic stucco or vinyl siding or aluminum siding or brick veneer or asbestos siding or fiber cement siding or composite shingle siding or masonite siding or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Color'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_light_ _medium_ _medium dark_ _dark_ _reflective_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'light or medium or medium dark or dark or reflective'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:SolarAbsorptance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Emittance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:Insulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:FloorJoists'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:RimJoists/h:RimJoist/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall'/>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:ExteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:AtticWallType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_gable_ _knee wall_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gable or knee wall or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:WallType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Studs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Siding'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_wood siding_ _stucco_ _synthetic stucco_ _vinyl siding_ _aluminum siding_ _brick veneer_ _asbestos siding_ _fiber cement siding_ _composite shingle siding_ _masonite siding_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'wood siding or stucco or synthetic stucco or vinyl siding or aluminum siding or brick veneer or asbestos siding or fiber cement siding or composite shingle siding or masonite siding or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Color'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_light_ _medium_ _medium dark_ _dark_ _reflective_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'light or medium or medium dark or dark or reflective'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:SolarAbsorptance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Emittance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:Insulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Walls/h:Wall/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:ExteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_solid concrete_ _concrete block_ _concrete block foam core_ _concrete block vermiculite core_ _double brick_ _wood_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'solid concrete or concrete block or concrete block foam core or concrete block vermiculite core or double brick or wood'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Length'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Height'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:DepthBelowGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:AdjacentToFoundation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:InteriorStuds'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:DistanceToTopOfInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:DistanceToBottomOfInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Insulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FoundationWalls/h:FoundationWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:ExteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:FloorJoists'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:FloorTrusses'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:FloorCovering'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_carpet_ _tile_ _hardwood_ _vinyl_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'carpet or tile or hardwood or vinyl or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor/h:Insulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:FrameFloors/h:FrameFloor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:InteriorAdjacentTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_adiabatic_ _attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _ground_ _living space_ _other_ _other heated space_ _other housing unit_ _other housing unit above_ _other housing unit below_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'adiabatic or attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or ground or living space or other or other heated space or other housing unit or other housing unit above or other housing unit below or other multifamily buffer space or other non-freezing space or outside or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:Perimeter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:ExposedPerimeter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:PerimeterInsulationDepth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:UnderSlabInsulationWidth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:UnderSlabInsulationSpansEntireSlab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:OnGradeExposedPerimeter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:DepthBelowGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:FloorCovering'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_carpet_ _tile_ _hardwood_ _vinyl_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'carpet or tile or hardwood or vinyl or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:PerimeterInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab/h:UnderSlabInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Slabs/h:Slab'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window'/>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window/h:WindowtoWallRatio'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window/h:AttachedToWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Windows/h:Window/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight'/>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight/h:SolarTube'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight/h:Pitch'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight/h:AttachedToRoof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Skylights/h:Skylight/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door'/>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:AttachedToWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:DoorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_ _storm_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior or storm'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:DoorMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_solid wood_ _hollow wood_ _uninsulated metal_ _insulated metal_ _glass_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'solid wood or hollow wood or uninsulated metal or insulated metal or glass or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:WeatherStripping'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:StormDoor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:RValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:LeakinessDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_very tight_ _tight_ _average_ _leaky_ _very leaky_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'very tight or tight or average or leaky or very leaky'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Enclosure/h:Doors/h:Door/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Systems/h:HVAC'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:CombustionVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:Maintenance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:PrimarySystems'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:HeatPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:PrimarySystems/h:PrimaryHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACPlant/h:PrimarySystems/h:PrimaryCoolingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:ConditionedFloorAreaServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:AnnualHeatingDistributionSystemEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:AnnualCoolingDistributionSystemEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:HVACDistributionImprovement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution'/>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicDistribution'/>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:HydronicAndAirDistribution'/>
    <sch:rule context='//h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:Other'/>
    <sch:rule context='//h:Systems/h:HVAC/h:Maintenance/h:Schedule'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_none_ _yes - unspecified_ _as needed_ _daily_ _weekly_ _bi-weekly_ _monthly_ _semi-quarterly_ _quarterly_ _semi-annually_ _annually_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'none or yes - unspecified or as needed or daily or weekly or bi-weekly or monthly or semi-quarterly or quarterly or semi-annually or annually'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:Maintenance/h:ACReplacedinLastTenYears'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:Maintenance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:HVAC/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan'/>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FanType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_exhaust only_ _supply only_ _heat recovery ventilator_ _energy recovery ventilator_ _balanced_ _central fan integrated supply_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'exhaust only or supply only or heat recovery ventilator or energy recovery ventilator or balanced or central fan integrated supply'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:RatedFlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:CalculatedFlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:TestedFlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:HoursInOperation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:DeliveredVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FanControlProperlyLabeled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_true_ _false_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'true or false or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:ProperlyVented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_true_ _false_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'true or false or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FanLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_bath_ _garage_ _garage - conditioned_ _garage - unconditioned_ _hallway_ _kitchen_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'bath or garage or garage - conditioned or garage - unconditioned or hallway or kitchen or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:UsedForLocalVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:UsedForWholeBuildingVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:UsedForSeasonalCoolingLoadReduction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:UsedForGarageVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:IsSharedSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FractionOutdoorAir'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FractionRecirculation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:RatedNoise'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:TestedNoise'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:TotalRecoveryEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:SensibleRecoveryEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:AdjustedTotalRecoveryEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:AdjustedSensibleRecoveryEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:FanPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Home Ventilation Institute_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Home Ventilation Institute or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:AttachedToHVACDistributionSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:AttachedToPreconditioningHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan/h:AttachedToPreconditioningCoolingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:CombustionVentilation/h:CombustionVentilationSystem'/>
    <sch:rule context='//h:Systems/h:CombustionVentilation/h:CombustionVentilationSystem/h:VentSystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_atmospheric_ _induced draft_ _power vented (at unit)_ _power vented (at exterior)_ _direct vented_ _sealed combustion_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'atmospheric or induced draft or power vented (at unit) or power vented (at exterior) or direct vented or sealed combustion'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:CombustionVentilation/h:CombustionVentilationSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:CombustionVentilation/h:CombustionVentilationSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:HotWaterDistributionSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:AttachedToCAZ'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:FuelType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_storage water heater_ _dedicated boiler with storage tank_ _instantaneous water heater_ _heat pump water heater_ _space-heating boiler with storage tank_ _space-heating boiler with tankless coil_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'storage water heater or dedicated boiler with storage tank or instantaneous water heater or heat pump water heater or space-heating boiler with storage tank or space-heating boiler with tankless coil'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _living space_ _mechanical closet_ _other exterior_ _other heated space_ _other housing unit_ _other interior_ _other multifamily buffer space_ _other non-freezing space_ _roof deck_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or living space or mechanical closet or other exterior or other heated space or other housing unit or other interior or other multifamily buffer space or other non-freezing space or roof deck or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:YearInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:ModelYear'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:AHRINumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:IsSharedSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:NumberofUnitsServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:PerformanceAdjustment'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:TankVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:FractionDHWLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:HeatingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:UniformEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:FirstHourRating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:GallonsPerMinute'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:RecoveryEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:ThermalEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:StandbyLoss'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:MeetsACCA5QIHVACSpecification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:HotWaterTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:HasMixingValve'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:UsesDesuperheater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:HasSharedCombustionVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:CombustionVentilationOrphaned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:CombustionVentingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:RelatedHVACSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:Installation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterImprovement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:TankWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket/h:InsulationMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket/h:JacketRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:Jacket'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:TankWall/h:InsulationMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:TankWall/h:TankWallRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:TankWall/h:Thickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:WaterHeaterInsulation/h:TankWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:Installation/h:Standard'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_ACCA 5 QI HVAC_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ACCA 5 QI HVAC or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingSystem/h:Installation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl/h:Model'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl/h:ControlTechnology'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_smart_ _timer_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'smart or timer'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl/h:TemperatureControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_fixed_ _variable_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'fixed or variable'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterHeatingControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:AttachedToWaterHeatingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:PipeInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Standard'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Standard/h:PipingLength'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Standard'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation/h:ControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_no control_ _timer_ _temperature_ _presence sensor demand control_ _manual demand control_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'no control or timer or temperature or presence sensor demand control or manual demand control'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation/h:RecirculationPipingLoopLength'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation/h:BranchPipingLoopLength'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation/h:PumpPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:SystemType/h:Recirculation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery/h:FacilitiesConnected'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_one_ _all_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'one or all'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery/h:EqualFlow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery/h:Efficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:HotWaterDistribution/h:DrainWaterHeatRecovery'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:WaterFixtureType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
      <sch:assert role='ERROR' test='contains(&quot;_faucet_ _shower head_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'faucet or shower head or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:FlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:LowFlow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:FaucetAerator'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:MinutesPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:TemperatureInitiatedShowerFlowRestrictionValve'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _WaterSense_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or WaterSense or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or other or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:AttachedToWaterHeatingSystem'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:WaterFixture/h:AttachedToHotWaterDistribution'/>
    <sch:rule context='//h:Systems/h:WaterHeating/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem'/>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:SystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_hot water_ _hot water and space heating_ _space heating_ _hybrid system_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'hot water or hot water and space heating or space heating or hybrid system'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorLoopType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_air direct_ _air indirect_ _liquid direct_ _liquid indirect_ _passive thermosyphon_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'air direct or air indirect or liquid direct or liquid indirect or passive thermosyphon'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single glazing black_ _single glazing selective_ _double glazing black_ _double glazing selective_ _evacuated tube_ _integrated collector storage_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single glazing black or single glazing selective or double glazing black or double glazing selective or evacuated tube or integrated collector storage'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorOrientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorAzimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorTilt'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorRatedOpticalEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:CollectorRatedThermalLosses'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:StorageVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:ConnectedTo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:SolarFraction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:SolarEnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:AttachedToWaterHeatingSystem'/>
    <sch:rule context='//h:Systems/h:SolarThermal/h:SolarThermalSystem/h:AttachedToHotWaterDistribution'/>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem'/>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:IsSharedSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:NumberofUnitsServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_roof_ _ground_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'roof or ground or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:Ownership'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_leased_ _owned_ _power purchase agreement_ _utility owned_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'leased or owned or power purchase agreement or utility owned or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:ModuleType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_standard_ _premium_ _thin film_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'standard or premium or thin film'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:Tracking'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
      <sch:assert role='ERROR' test='contains(&quot;_fixed_ _1-axis_ _1-axis backtracked_ _2-axis_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'fixed or 1-axis or 1-axis backtracked or 2-axis'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:ArrayOrientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:ArrayAzimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:ArrayTilt'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:MaxPowerOutput'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:CollectorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:NumberOfPanels'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:InverterEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:SystemLossesFraction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:YearInverterManufactured'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:YearModulesManufactured'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:YearInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:AnnualOutput'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem/h:LevelizedCostOfElectricity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Photovoltaics/h:PVSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery'/>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _exterior wall_ _garage_ _garage - conditioned_ _garage - unconditioned_ _living space_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _roof deck_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or exterior wall or garage or garage - conditioned or garage - unconditioned or living space or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or outside or roof deck or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:GridConnected'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:BatteryType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Li-ion_ _lead acid_ _Ni-Cd_ _salt water_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Li-ion or lead acid or Ni-Cd or salt water or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:CoolingStrategy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_passive_ _active air cooling_ _liquid cooling_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'passive or active air cooling or liquid cooling'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:NominalCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:UsableCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:RatedPowerOutput'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:PeakPowerOutput'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:NominalVoltage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery/h:RoundTripEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Batteries/h:Battery'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger'/>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:NumberofUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ChargingLevel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ChargingConnector'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_SAE J1772_ _CHAdeMO_ _Tesla_ _Combined Charging System_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'SAE J1772 or CHAdeMO or Tesla or Combined Charging System'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ModelYear'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ACPowerSourceVoltage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:Amperage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:ChargingPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger/h:StandbyPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:ElectricVehicleChargers/h:ElectricVehicleCharger'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine'/>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:Model'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:YearInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_AWEA 9.1-2009_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'AWEA 9.1-2009 or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:AWEARatedAnnualEnergy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:AWEARatedSoundLevel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:AWEARatedPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:PeakPower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:RotorDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:HubHeight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine/h:LevelizedCostOfElectricity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Systems/h:Wind/h:WindTurbine'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:ClothesWasher'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:ClothesDryer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:Dishwasher'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:Refrigerator'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:Freezer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:Dehumidifier'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:CookingRange'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances/h:Oven'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Appliances'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingFixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:Fixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_ _garage_ _common area_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior or garage or common area'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:NumberofUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:FractionofUnitsInLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:LightingType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:AverageLumens'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:AverageWattage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _ERI Tier I_ _ERI Tier II_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or ERI Tier I or ERI Tier II or other or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:AverageHoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:LightingDailyHours'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_1 to 4 hours per day_ _4 to 12 hours per day_ _more than 12 hours per day_ _all day_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '1 to 4 hours per day or 4 to 12 hours per day or more than 12 hours per day or all day'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup/h:FloorAreaServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingGroup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingFixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingFixture/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _ERI Tier I_ _ERI Tier II_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or ERI Tier I or ERI Tier II or other or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingFixture'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl/h:AttachedToLightingGroup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl/h:LightingControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_daylight dimming_ _occupancy sensors_ _vacancy sensors_ _manual dimming_ _bi-level control_ _timers_ _manual_ _advanced controls_ _part of emcs_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'daylight dimming or occupancy sensors or vacancy sensors or manual dimming or bi-level control or timers or manual or advanced controls or part of emcs'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl/h:NumberofLightingControls'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_ _garage_ _common area_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior or garage or common area'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:LightingControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:Airflow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 3'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:Airflow/h:FanSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low_ _medium_ _high_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low or medium or high'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:Airflow/h:Airflow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Lighting/h:CeilingFan/h:Airflow/h:Efficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:Incandescent'/>
    <sch:rule context='//h:LightingType/h:FluorescentTube'/>
    <sch:rule context='//h:LightingType/h:CompactFluorescent'/>
    <sch:rule context='//h:LightingType/h:LightEmittingDiode'/>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge'/>
    <sch:rule context='//h:LightingType/h:Other'/>
    <sch:rule context='//h:LightingType/h:Incandescent/h:Halogen'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:Incandescent'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:FluorescentTube/h:TubeType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_T2_ _T4_ _T5_ _T8_ _super T8_ _T9_ _T10_ _T12_ _T17_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'T2 or T4 or T5 or T8 or super T8 or T9 or T10 or T12 or T17'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:FluorescentTube/h:BallastType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electronic_ _magnetic_ _instant start_ _rapid start_ _programmed start_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electronic or magnetic or instant start or rapid start or programmed start'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:FluorescentTube'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:CompactFluorescent'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:LightEmittingDiode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type/h:MercuryVapor'/>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type/h:Sodium'/>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type/h:MetalHalide'/>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type/h:Sodium/h:Pressure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_high_ _low_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'high or low'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:HighIntensityDischarge/h:Type/h:Sodium'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:Other/h:Description'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:LightingType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool'/>
    <sch:rule context='//h:Pools/h:Pool/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_in ground_ _on ground_ _above ground_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'in ground or on ground or above ground or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Volume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:MonthsPerYearofOperation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:ReturnPipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:SuctionPipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:FilterType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_sand_ _diatomaceous earth_ _cartridge_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'sand or diatomaceous earth or cartridge or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump'/>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single speed_ _multi speed_ _variable speed_ _variable flow_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single speed or multi speed or variable speed or variable flow or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_ENERGY STAR_ _ENERGY STAR Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _Cee Tier 3_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ENERGY STAR or ENERGY STAR Most Efficient or CEE Tier 1 or CEE Tier 2 or Cee Tier 3 or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:SpeedSetting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low_ _high_ _most efficient_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low or high or most efficient or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:RatedHorsepower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:TotalHorsepower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:ServiceFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed/h:Power'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed/h:MotorNominalSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed/h:FlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:PumpSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_kWh/year_ _W_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kWh/year or W'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:PoolPumps/h:PoolPump/h:Load/h:Value'/>
    <sch:rule context='//h:Pools/h:Pool/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Cleaner/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_robotic_ _suction side_ _pressure side_ _booster pump_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'robotic or suction side or pressure side or booster pump or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Cleaner/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_gas fired_ _electric resistance_ _heat pump_ _solar_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gas fired or electric resistance or heat pump or solar or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_kWh/year_ _therm/year_ _W_ _Btuh_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kWh/year or therm/year or W or Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Pools/h:Pool/h:Heater/h:Load/h:Value'/>
    <sch:rule context='//h:HotTubs/h:HotTub'/>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_in ground_ _on ground_ _above ground_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'in ground or on ground or above ground or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Volume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:MonthsPerYearofOperation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:ReturnPipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:SuctionPipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:FilterType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_sand_ _diatomaceous earth_ _cartridge_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'sand or diatomaceous earth or cartridge or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump'/>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single speed_ _multi speed_ _variable speed_ _variable flow_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single speed or multi speed or variable speed or variable flow or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_ENERGY STAR_ _ENERGY STAR Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _Cee Tier 3_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ENERGY STAR or ENERGY STAR Most Efficient or CEE Tier 1 or CEE Tier 2 or Cee Tier 3 or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:EnergyFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:SpeedSetting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low_ _high_ _most efficient_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low or high or most efficient or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:RatedHorsepower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:TotalHorsepower'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:ServiceFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed/h:Power'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed/h:MotorNominalSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed/h:FlowRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:PumpSpeed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_kWh/year_ _W_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kWh/year or W'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:HotTubPumps/h:HotTubPump/h:Load/h:Value'/>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Cleaner/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_robotic_ _suction side_ _pressure side_ _booster pump_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'robotic or suction side or pressure side or booster pump or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Cleaner/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Cleaner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_gas fired_ _electric resistance_ _heat pump_ _solar_ _other_ _unknown_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gas fired or electric resistance or heat pump or solar or other or unknown or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater/h:HoursPerDay'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_kWh/year_ _therm/year_ _W_ _Btuh_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kWh/year or therm/year or W or Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HotTubs/h:HotTub/h:Heater/h:Load/h:Value'/>
    <sch:rule context='//h:MiscLoads/h:PlugLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:PlugLoadType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_TV plasma_ _TV CRT_ _TV other_ _computer_ _space heater_ _water bed_ _aquarium_ _electric vehicle charging_ _well pump_ _sauna_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'TV plasma or TV CRT or TV other or computer or space heater or water bed or aquarium or electric vehicle charging or well pump or sauna or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:Count'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_kWh/year_ _W_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kWh/year or W'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoad/h:Load/h:Value'/>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl/h:ControlsPlugLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl/h:Count'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl/h:PlugLoadControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_advanced power strip for AV_ _advanced power strip for IT_ _whole-house energy management system_ _smart plug_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'advanced power strip for AV or advanced power strip for IT or whole-house energy management system or smart plug or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:PlugLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:FuelLoadType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_grill_ _lighting_ _fireplace_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'grill or lighting or fireplace or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:Count'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:Load'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:FuelType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:Load/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_therm/year_ _Btuh_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'therm/year or Btuh'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoad/h:Load/h:Value'/>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl/h:ControlsFuelLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl/h:Count'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl/h:FuelLoadControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MiscLoads/h:FuelLoadControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:General'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:MoistureControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Pests'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SprayFoam'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:General/h:TestsCompleted'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:General/h:TestsPassed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation/h:WholeBuildingVentilationDesign'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation/h:SpotVentilationDesign'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation/h:OtherVentilationIssues'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation/h:VentilationImprovement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Ventilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:MoistureControl/h:MoistureControlInfo'/>
    <sch:rule context='//h:HealthAndSafety/h:MoistureControl/h:MoistureControlImprovement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:MoistureControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CAZDepressurizationLimit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:BaselineTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:PoorCaseTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:NetPressureChange'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:DepressurizationFindingPoorCase'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_pass_ _fail_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'pass or fail'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:AmountAmbientCOinCAZduringTesting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:AmbientCOinCAZExceeded35ppmduringTesting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:Notes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CAZAppliance'/>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CombustionVentingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FlueVisualCondition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_pass_ _fail_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'pass or fail'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FlueConditionNotes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:OutsideTemperatureFlueDraftTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FlueDraftTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:SpillageTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CarbonMonoxideTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:StackTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FlueDraftTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:SpillageTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CarbonMonoxideTest/h:MaxAmbientCOinLivingSpaceDuringAudit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CarbonMonoxideTest/h:AmbientCOActionDuringCAZTesting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:CarbonMonoxideTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks/h:FuelType'>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks/h:LeaksIdentified'/>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks/h:LeaksAddressed'/>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks/h:Notes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:CombustionAppliances/h:CombustionApplianceZone/h:CombustionApplianceTest/h:FuelLeaks'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:StoveID'/>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:StoveFuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:HeatingStoveProperlyVented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:COReading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:TimeofCOReading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:GasLeaksIdentified'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest/h:ActionsTaken'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:StoveTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint/h:Disturbed6SqFtIntPaint'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint/h:Disturbed20SqFtExtPaint'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint/h:WindowReplacement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint/h:LeadSafeCertificationNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:LeadPaint'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTested'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:EducationMaterialProvided'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:ActionsTaken'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:ActionsMeetIndustrySpecs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:ResultBelowActionLevel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest/h:StartDateTime'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest/h:EndDateTime'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest/h:TestLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_kitchen_ _crawlspace_ _basement_ _bedroom_ _living room_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kitchen or crawlspace or basement or bedroom or living room or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest/h:RadonTestResults'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest/h:RadonTestMethod'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_activated charcoal absorption_ _alpha-track detectors_ _unfiltered track detection_ _short term electret ion chamber_ _long term electret ion chamber_ _continuous radon monitoring_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'activated charcoal absorption or alpha-track detectors or unfiltered track detection or short term electret ion chamber or long term electret ion chamber or continuous radon monitoring'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Radon/h:RadonTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:UnventedCombustionAppliancesinLivingArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:ConformanceWithANSIZ21_11_2'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:PrimaryHeatingSource'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:AttachedGarage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:GarageContinuousAirBarrier'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants/h:GarageExhaustFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SourcePollutants'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Pests/h:IndicationsofPests'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Pests/h:EvidenceofPesticide'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Pests/h:IndustryStandardCompliance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Pests'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:AsbestosSuspected'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:TestedForAsbestos'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:AsbestosFound'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:TypeofBlowerDoorTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_pressurization_ _depressurization_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'pressurization or depressurization'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:ActionsTaken'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos/h:ActionsMeetIndustrySpecifications'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:Asbestos'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SprayFoam/h:SprayFoamInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HealthAndSafety/h:SprayFoam'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZApplianceReading/h:PoorScenario'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZApplianceReading/h:CurrentCondition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZApplianceReading/h:TestResult'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_passed_ _failed_ _not tested_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'passed or failed or not tested'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:DoorsOpenClosed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:Pressure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning/h:BathExhaustFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning/h:KitchenExhaustFan'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning/h:ClothesDryer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning/h:CentralVacuum'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:ItemsRunning/h:AirHandler'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:DoorsOpenClosed/h:BasementDoors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_open_ _closed_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'open or closed'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CAZTestConfiguration/h:DoorsOpenClosed/h:OtherDoors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_open_ _closed_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'open or closed'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:YesNoRecommendInstall/h:Yes'/>
    <sch:rule context='//h:YesNoRecommendInstall/h:No'/>
    <sch:rule context='//h:YesNoRecommendInstall/h:NA'/>
    <sch:rule context='//h:YesNoRecommendInstall/h:Yes/h:Installed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_true_ _false_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'true or false or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:YesNoRecommendInstall/h:Yes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:YesNoRecommendInstall/h:No/h:Recommended'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_true_ _false_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'true or false or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:YesNoRecommendInstall/h:No'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:YesNoRecommendInstall/h:NA'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:Method'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_ASHRAE 62.2-1989_ _ASHRAE 62.2-2007_ _ASHRAE 62.2-2010_ _ASHRAE 62.2-2013_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ASHRAE 62.2-1989 or ASHRAE 62.2-2007 or ASHRAE 62.2-2010 or ASHRAE 62.2-2013'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:InfiltrationCreditApplied'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_true_ _false_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'true or false or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:LocalWeatherFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:NFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:InfiltrationCreditCFMnat'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:VentilationImprovementRecommendation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_require_ _recommend_ _no recommendation_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'require or recommend or no recommendation'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:RequiredVentilationRate'/>
    <sch:rule context='//h:WholeBldgVentDesignInfo/h:RequiredVentilationRateUnits'>
      <sch:assert role='ERROR' test='contains(&quot;_ACH_ _CFMnat_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ACH or CFMnat'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_bath_ _garage_ _garage - conditioned_ _garage - unconditioned_ _kitchen_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'bath or garage or garage - conditioned or garage - unconditioned or kitchen or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:IntermittentExhaustRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:ContinuousExhaustRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:WindowOpeningCredit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:RequiredIntermittentExhaustRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:RequiredContinuousExhaustRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:InitialAirflorDeficit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo/h:AirflowRateUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_CFM_ _ACH_ _L/s_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CFM or ACH or L/s'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:SpotVentDesignInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues/h:HouseGarageAirBarrier'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues/h:DuctsInGarageAirSealed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues/h:ClothesDryerVented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues/h:OtherVentilationIssue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:OtherVentIssues/h:OtherVentilationIssue/h:Description'/>
    <sch:rule context='//h:OtherVentIssues/h:OtherVentilationIssue/h:Answer'/>
    <sch:rule context='//h:StatusMessage/h:MessageType'/>
    <sch:rule context='//h:StatusMessage/h:MessageID'/>
    <sch:rule context='//h:StatusMessage/h:Message'/>
    <sch:rule context='//h:StatusMessage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:Fuel'>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:Units'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_cmh_ _ccf_ _kcf_ _Mcf_ _cfh_ _kWh_ _MWh_ _Btu_ _kBtu_ _MBtu_ _therms_ _lbs_ _kLbs_ _MLbs_ _tonnes_ _cords_ _gal_ _kgal_ _ton hours_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'cmh or ccf or kcf or Mcf or cfh or kWh or MWh or Btu or kBtu or MBtu or therms or lbs or kLbs or MLbs or tonnes or cords or gal or kgal or ton hours'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:TotalSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:TotalDollarSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:PctReduction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType/h:EndUseSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FuelSavingsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EndUseInfoType/h:EndUse'>
      <sch:assert role='ERROR' test='contains(&quot;_Heating_ _Cooling_ _HotWater_ _Appliance_ _Lighting_ _PV_ _SolarThermal_ _Other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Heating or Cooling or HotWater or Appliance or Lighting or PV or SolarThermal or Other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EndUseInfoType/h:EndUseValue'/>
    <sch:rule context='//h:EndUseInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:SystemInfo/h:SystemIdentifier'/>
    <sch:rule context='//h:SystemInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:AttachedToCAZ'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:UnitLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _living space_ _mechanical closet_ _other exterior_ _other heated space_ _other housing unit_ _other interior_ _other multifamily buffer space_ _other non-freezing space_ _roof deck_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or living space or mechanical closet or other exterior or other heated space or other housing unit or other interior or other multifamily buffer space or other non-freezing space or roof deck or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:YearInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:ModelYear'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Manufacturer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:ModelNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:SerialNumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:AHRINumber'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:PerformanceAdjustment'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _NEEP Cold-Climate Air-Source Heat Pump Specification_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or NEEP Cold-Climate Air-Source Heat Pump Specification or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:HasSharedCombustionVentilation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:CombustionVentingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:DistributionSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Installation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:HVACMaintenance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_none_ _yes - unspecified_ _as needed_ _daily_ _weekly_ _bi-weekly_ _monthly_ _semi-quarterly_ _quarterly_ _semi-annually_ _annually_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'none or yes - unspecified or as needed or daily or weekly or bi-weekly or monthly or semi-quarterly or quarterly or semi-annually or annually'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:IsSharedSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:IsVentilationPreconditioningSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:NumberofUnitsServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Installation/h:Standard'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_ACCA 5 QI HVAC_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'ACCA 5 QI HVAC or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Installation/h:SizingCalculation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_manual j_ _manual j and manual d_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'manual j or manual j and manual d or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Installation/h:EnvelopeImprovementsUsedinSizing'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:Installation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACSystemInfo/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:HeatingSystemInfoType/h:HeatingSystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:HeatingSystemFuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:HeatingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:FractionHeatLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:FloorAreaServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType/h:ElectricAuxiliaryEnergy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace'/>
    <sch:rule context='//h:HeatingSystemType/h:WallFurnace'/>
    <sch:rule context='//h:HeatingSystemType/h:FloorFurnace'/>
    <sch:rule context='//h:HeatingSystemType/h:Boiler'/>
    <sch:rule context='//h:HeatingSystemType/h:ElectricResistance'/>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace'/>
    <sch:rule context='//h:HeatingSystemType/h:Stove'/>
    <sch:rule context='//h:HeatingSystemType/h:PortableHeater'/>
    <sch:rule context='//h:HeatingSystemType/h:FixedHeater'/>
    <sch:rule context='//h:HeatingSystemType/h:SolarThermal'/>
    <sch:rule context='//h:HeatingSystemType/h:DistrictSteam'/>
    <sch:rule context='//h:HeatingSystemType/h:Other'/>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:SealedCombustion'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:CondensingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:AtmosphericBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:PowerBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace/h:RetentionHead'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Furnace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:BoilerType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_hot water_ _steam_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'hot water or steam'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:SealedCombustion'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:CondensingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:AtmosphericBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:PowerBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:RotaryCup'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler/h:RetentionHead'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Boiler'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:ElectricResistance/h:ElectricDistribution'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_baseboard_ _radiant floor_ _radiant ceiling_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'baseboard or radiant floor or radiant ceiling'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:ElectricResistance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace/h:SmokeEmissionRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Fireplace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Stove/h:SmokeEmissionRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Stove/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Stove/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Stove/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Stove'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:PortableHeater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:FixedHeater'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:SolarThermal/h:SolarThermalSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:SolarThermal'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:DistrictSteam/h:DistrictSteamType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_1-pipe_ _2-pipe_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '1-pipe or 2-pipe or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:DistrictSteam'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Other/h:Description'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatingSystemType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:HeatPumpType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_water-to-air_ _water-to-water_ _air-to-air_ _air-to-water_ _mini-split_ _ground-to-air_ _ground-to-water_ _water-loop-to-air_ _variable refrigerant flow_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'water-to-air or water-to-water or air-to-air or air-to-water or mini-split or ground-to-air or ground-to-water or water-loop-to-air or variable refrigerant flow'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:HeatPumpFuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:HeatingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:HeatingCapacity17F'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:CoolingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:CompressorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single stage_ _two stage_ _variable speed_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single stage or two stage or variable speed'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:CoolingSensibleHeatFraction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:GeothermalLoop'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_open_ _closed_ _direct expansion_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'open or closed or direct expansion'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_integrated_ _separate_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'integrated or separate'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupSystemFuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupAnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupHeatingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:BackupHeatingSwitchoverTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:FractionHeatLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:FractionCoolLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:FloorAreaServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType/h:AnnualHeatingEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HeatPumpInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:CoolingSystemType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_central air conditioner_ _mini-split_ _room air conditioner_ _evaporative cooler_ _chiller_ _cooling tower_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'central air conditioner or mini-split or room air conditioner or evaporative cooler or chiller or cooling tower or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:CoolingSystemFuel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:CoolingCapacity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:CompressorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single stage_ _two stage_ _variable speed_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single stage or two stage or variable speed'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:FractionCoolLoadServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:FloorAreaServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:AnnualCoolingEfficiency'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType/h:SensibleHeatFraction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingSystemInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:CoolingEfficiencyType/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_SEER_ _EER_ _COP_ _kW/ton_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'SEER or EER or COP or kW/ton'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:CoolingEfficiencyType/h:Value'/>
    <sch:rule context='//h:HeatingEfficiencyType/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_HSPF_ _COP_ _AFUE_ _Percent_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'HSPF or COP or AFUE or Percent'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HeatingEfficiencyType/h:Value'/>
    <sch:rule context='//h:HydronicDistributionInfo/h:FractionHydronicPipeInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PipeRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PipeInsulationThickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PipeLength'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:HydronicDistributionType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_radiator_ _baseboard_ _radiant floor_ _radiant ceiling_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'radiator or baseboard or radiant floor or radiant ceiling or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:SupplyTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:ReturnTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PumpandZoneValve'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PumpandZoneValve/h:ValveCorrections'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PumpandZoneValve/h:ThermostaticRadiatorValves'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicDistributionInfo/h:PumpandZoneValve/h:VariableSpeedPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:AirDistributionType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_regular velocity_ _high velocity_ _gravity_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'regular velocity or high velocity or gravity'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:AirHandlerMotorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_PSC single-speed_ _PSC multi-speed_ _ECM_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'PSC single-speed or PSC multi-speed or ECM'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:DuctLeakageMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:DuctSystemSizingAppropriate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:NumberofReturnRegisters'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:TotalExternalStaticPressureMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_supply_ _return_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'supply or return'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_duct board_ _sheet metal_ _galvanized_ _flexible_ _fiberboard_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'duct board or sheet metal or galvanized or flexible or fiberboard or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctInsulationMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctInsulationRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctInsulationThickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctInsulationCondition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_good_ _fair_ _poor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'good or fair or poor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _exterior wall_ _garage_ _garage - conditioned_ _garage - unconditioned_ _interstitial space_ _living space_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _roof deck_ _unconditioned space_ _under slab_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or exterior wall or garage or garage - conditioned or garage - unconditioned or interstitial space or living space or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or outside or roof deck or unconditioned space or under slab'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:FractionDuctArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts/h:DuctSurfaceArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:Ducts'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:TotalExternalStaticPressureMeasurement/h:Supply'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirDistributionInfo/h:TotalExternalStaticPressureMeasurement/h:Return'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:HydronicAndAirDistributionType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_fan coil_ _water loop heat pump_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'fan coil or water loop heat pump or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:AirHandlerMotorType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_PSC single-speed_ _PSC multi-speed_ _ECM_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'PSC single-speed or PSC multi-speed or ECM'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:DuctLeakageMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:DuctSystemSizingAppropriate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:NumberofReturnRegisters'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:TotalExternalStaticPressureMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:FractionHydronicPipeInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PipeRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PipeInsulationThickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PipeLength'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:SupplyTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:ReturnTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PumpandZoneValve'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_supply_ _return_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'supply or return'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_duct board_ _sheet metal_ _galvanized_ _flexible_ _fiberboard_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'duct board or sheet metal or galvanized or flexible or fiberboard or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctInsulationMaterial'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctInsulationRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctInsulationThickness'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctInsulationCondition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_good_ _fair_ _poor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'good or fair or poor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _exterior wall_ _garage_ _garage - conditioned_ _garage - unconditioned_ _interstitial space_ _living space_ _other heated space_ _other housing unit_ _other multifamily buffer space_ _other non-freezing space_ _outside_ _roof deck_ _unconditioned space_ _under slab_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or exterior wall or garage or garage - conditioned or garage - unconditioned or interstitial space or living space or other heated space or other housing unit or other multifamily buffer space or other non-freezing space or outside or roof deck or unconditioned space or under slab'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:FractionDuctArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts/h:DuctSurfaceArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:Ducts'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:TotalExternalStaticPressureMeasurement/h:Supply'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:TotalExternalStaticPressureMeasurement/h:Return'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PumpandZoneValve/h:ValveCorrections'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PumpandZoneValve/h:ThermostaticRadiatorValves'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HydronicAndAirDistributionInfo/h:PumpandZoneValve/h:VariableSpeedPump'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingSystemIdentifiers'/>
    <sch:rule context='//h:IncentiveDetailsType/h:IncentiveType'/>
    <sch:rule context='//h:IncentiveDetailsType/h:FundingSourceCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IncentiveDetailsType/h:FundingSourceName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IncentiveDetailsType/h:IncentiveAmount'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:IncentiveDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Zones'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Enclosure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Systems'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Appliances'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Lighting'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interior_ _exterior_ _garage_ _common area_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interior or exterior or garage or common area'</sch:assert>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _ERI Tier I_ _ERI Tier II_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or ERI Tier I or ERI Tier II or other or unknown'</sch:assert>
      <sch:assert role='ERROR' test='contains(&quot;_1 to 4 hours per day_ _4 to 12 hours per day_ _more than 12 hours per day_ _all day_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '1 to 4 hours per day or 4 to 12 hours per day or more than 12 hours per day or all day'</sch:assert>
      <sch:assert role='ERROR' test='contains(&quot;_daylight dimming_ _occupancy sensors_ _vacancy sensors_ _manual dimming_ _bi-level control_ _timers_ _manual_ _advanced controls_ _part of emcs_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'daylight dimming or occupancy sensors or vacancy sensors or manual dimming or bi-level control or timers or manual or advanced controls or part of emcs'</sch:assert>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _Energy Star Most Efficient_ _CEE Tier 1_ _CEE Tier 2_ _CEE Tier 3_ _ERI Tier I_ _ERI Tier II_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or Energy Star Most Efficient or CEE Tier 1 or CEE Tier 2 or CEE Tier 3 or ERI Tier I or ERI Tier II or other or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:Pools'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:HotTubs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:MiscLoads'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:HealthAndSafety'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:AnnualEnergyUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:SiteType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_rural_ _suburban_ _urban_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'rural or suburban or urban'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:Surroundings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_stand-alone_ _attached on one side_ _attached on two sides_ _attached on three sides_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'stand-alone or attached on one side or attached on two sides or attached on three sides'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:VerticalSurroundings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_unit above_ _unit below_ _unit above and below_ _no units above or below_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'unit above or unit below or unit above and below or no units above or below'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:ShieldingofHome'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_well-shielded_ _normal_ _exposed_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'well-shielded or normal or exposed'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:OrientationOfFrontOfHome'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:AzimuthOfFrontOfHome'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:PublicTransportation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:WalkingScore'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:WalkingScoreSource'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:FuelTypesAvailable'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:PublicTransportation/h:DistanceFromSubway'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:PublicTransportation/h:DistanceFromBus'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:PublicTransportation/h:DistanceFromTrain'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:Site/h:FuelTypesAvailable/h:Fuel'>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:HouseholdType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_family household_ _married couple, no children_ _male household, no spouse_ _female household, no spouse_ _nonfamily household_ _single male_ _single female_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'family household or married couple, no children or male household, no spouse or female household, no spouse or nonfamily household or single male or single female or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:YearOccupied'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:ResidentPopulationType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_no specific resident population_ _student_ _military_ _senior_ _special accessibility needs_ _young children_ _at risk_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'no specific resident population or student or military or senior or special accessibility needs or young children or at risk or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:Occupancy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_owner-occupied_ _renter-occupied_ _owner-and-renter-occupied_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'owner-occupied or renter-occupied or owner-and-renter-occupied or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:NumberofResidents'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:NumberofAdults'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:NumberofChildren'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:PubliclySubsidized'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:LowIncome'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:OccupantIncomeRange'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:OccupantIncomeRangeUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_% area median income_ _% federal poverty level_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '% area median income or % federal poverty level'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy/h:HighestLevelofOccupantEducation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_no high school_ _some high school_ _high school graduate_ _some college_ _vocational/technical/associates degree_ _bachelor&apos;s degree_ _some post graduate _ _master&apos;s degree_ _professional degree_ _doctoral degree_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'no high school or some high school or high school graduate or some college or vocational/technical/associates degree or bachelor's degree or some post graduate  or master's degree or professional degree or doctoral degree'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingOccupancy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:YearBuilt'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:YearBuiltKnownOrEstimated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_known_ _estimated_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'known or estimated'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:YearofLastRemodel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:ResidentialFacilityType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single-family detached_ _single-family attached_ _manufactured home_ _2-4 unit building_ _5+ unit building_ _multi-family - uncategorized_ _multi-family - town homes_ _multi-family - condos_ _apartment unit_ _studio unit_ _other_ _unknown_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single-family detached or single-family attached or manufactured home or 2-4 unit building or 5+ unit building or multi-family - uncategorized or multi-family - town homes or multi-family - condos or apartment unit or studio unit or other or unknown'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:PassiveSolar'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:BuildingHeight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofUnits'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofFloors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofConditionedFloors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofConditionedFloorsAboveGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AverageCeilingHeight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:FloorToFloorHeight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofRooms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofBedrooms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofBathrooms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofCompleteBathrooms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:BuildingFootprintArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:FootprintShape'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_rectangular_ _square_ _circular_ _L-shaped_ _U-shaped_ _I-shaped_ _V-shaped_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'rectangular or square or circular or L-shaped or U-shaped or I-shaped or V-shaped or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:GrossFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NetFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:ConditionedFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:FinishedFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:NumberofStoriesAboveGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:CooledFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:HeatedFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:UnconditionedFloorArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:BuildingVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:ConditionedBuildingVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:FoundationType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AtticType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AverageAtticRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AverageWallRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AverageFloorRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:AverageDuctRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:GaragePresent'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:GarageLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_basement_ _first floor_ _detached_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'basement or first floor or detached'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction/h:SpaceAboveGarage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_conditioned area_ _unconditioned attic_ _crawlspace_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'conditioned area or unconditioned attic or crawlspace'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:BuildingConstruction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:BuildingSummary/h:AnnualEnergyUse/h:ConsumptionInfo'/>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:ClimateZoneDOE'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_subarctic_ _marine_ _hot-dry_ _mixed-dry_ _hot-humid_ _mixed-humid_ _cold_ _very cold_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'subarctic or marine or hot-dry or mixed-dry or hot-humid or mixed-humid or cold or very cold'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:ClimateZoneIECC'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:RadonZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:TermiteZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_none to slight_ _slight to moderate_ _moderate to heavy_ _very heavy_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'none to slight or slight to moderate or moderate to heavy or very heavy'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:HurricaneZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:FloodZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:EarthquakeZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones/h:WeatherStation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_TMY_ _TMY2_ _TMY3_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'TMY or TMY2 or TMY3 or other'</sch:assert>
      <sch:assert role='ERROR' test='contains(&quot;_billing analysis_ _energy modeling_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'billing analysis or energy modeling'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:ClimateandRiskZones'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification'/>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Type'>
      <sch:assert role='ERROR' test='contains(&quot;_BPI-2101-compliant Certificate of Residential Energy Efficiency Features and Performance_ _Certified Passive House_ _ENERGY STAR Certified Homes_ _EnerPHit_ _HERS Index Score_ _Home Energy Score_ _Home Performance with ENERGY STAR_ _Indoor airPLUS_ _LEED For Homes_ _Living Building Challenge_ _NGBS New Construction_ _NGBS Small Projects Remodel_ _NGBS Whole-Home Remodel_ _Pearl Home Certification_ _PHIUS+_ _WaterSense_ _Zero Energy Ready Home_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'BPI-2101-compliant Certificate of Residential Energy Efficiency Features and Performance or Certified Passive House or ENERGY STAR Certified Homes or EnerPHit or HERS Index Score or Home Energy Score or Home Performance with ENERGY STAR or Indoor airPLUS or LEED For Homes or Living Building Challenge or NGBS New Construction or NGBS Small Projects Remodel or NGBS Whole-Home Remodel or Pearl Home Certification or PHIUS+ or WaterSense or Zero Energy Ready Home or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:OtherType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Body'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Metric'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Rating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Source'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Administrator_ _Assessor_ _Builder_ _Contractor or Installer_ _Other_ _Owner_ _Program Sponsor_ _Program Verifier_ _Public Records_ _See Remarks_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Administrator or Assessor or Builder or Contractor or Installer or Other or Owner or Program Sponsor or Program Verifier or Public Records or See Remarks'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Status'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_complete_ _in process_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'complete or in process'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:URL'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Version'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification/h:Year'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BuildingDetailsType/h:GreenBuildingVerifications/h:GreenBuildingVerification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:ProgramName'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:ProgramSponsor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:ProjectType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Title'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Notes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:StartDate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:CompleteDateEstimated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:CompleteDateActual'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Hours'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:FeeCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:ProjectCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Incentives'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:EnergySavingsInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 2'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:WaterSavingsInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 2'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Measures'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ProjectDetailsType/h:Incentives/h:Incentive'/>
    <sch:rule context='//h:ProjectDetailsType/h:Measures/h:Measure'/>
    <sch:rule context='//h:TotalCostType/h:TotalCostHealthSafetyMeasures'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:TotalCostType/h:TotalCostQualEnergyMeasures'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:MeasureSystemIdentifiers'/>
    <sch:rule context='//h:MeasureDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:MeasureCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:MeasureDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_attic_ _attic - conditioned_ _attic - unconditioned_ _attic - unvented_ _attic - vented_ _basement_ _basement - conditioned_ _basement - unconditioned_ _crawlspace_ _crawlspace - conditioned_ _crawlspace - unconditioned_ _crawlspace - unvented_ _crawlspace - vented_ _garage_ _garage - conditioned_ _garage - unconditioned_ _living space_ _mechanical closet_ _other exterior_ _other heated space_ _other housing unit_ _other interior_ _other multifamily buffer space_ _other non-freezing space_ _roof deck_ _unconditioned space_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'attic or attic - conditioned or attic - unconditioned or attic - unvented or attic - vented or basement or basement - conditioned or basement - unconditioned or crawlspace or crawlspace - conditioned or crawlspace - unconditioned or crawlspace - unvented or crawlspace - vented or garage or garage - conditioned or garage - unconditioned or living space or mechanical closet or other exterior or other heated space or other housing unit or other interior or other multifamily buffer space or other non-freezing space or roof deck or unconditioned space'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:EstimatedLife'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:InstallationDate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:Cost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:UnitPricingIndicator'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:Incentives'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:EnergySavingsInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 2'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:WaterSavingsInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0 and count(.) &lt;= 2'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:CustomerNotes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:WorkscopeNotes'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:Status'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Installed_ _NotInstalled_ _Recommended_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Installed or NotInstalled or Recommended'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:NotInstalledReasonCode'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:InstallingContractor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:QA'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:ReplacedComponents'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:InstalledComponents'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:MeasureSystemIdentifiers'/>
    <sch:rule context='//h:MeasureDetailsType/h:Quantity/h:Units'/>
    <sch:rule context='//h:MeasureDetailsType/h:Quantity/h:Value'/>
    <sch:rule context='//h:MeasureDetailsType/h:Incentives/h:Incentive'/>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved'/>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved/h:ResourceTypeCode'/>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved/h:LoadProfile'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved/h:Quantity'/>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved/h:AnnualAmount'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:ResourceSavingsInfo/h:ResourcesSaved'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:QA/h:QAStatus'>
      <sch:assert role='ERROR' test='contains(&quot;_passed_ _failed_ _not tested_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'passed or failed or not tested'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:QA/h:QAComments'/>
    <sch:rule context='//h:MeasureDetailsType/h:QA'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MeasureDetailsType/h:ReplacedComponents/h:ReplacedComponent'/>
    <sch:rule context='//h:MeasureDetailsType/h:InstalledComponents/h:InstalledComponent'>
      <sch:assert role='ERROR' test='count(.) &gt;= 1'/>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType/h:EnergySavingsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_estimated_ _measured_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'estimated or measured'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType/h:EnergySavingsReported'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_gross_ _net_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gross or net'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType/h:FuelSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType/h:DemandSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType/h:AnnualPercentReduction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergySavingsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:WaterSavingsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_estimated_ _measured_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'estimated or measured'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:Units'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_gal_ _kgal_ _Mgal_ _cf_ _ccf_ _kcf_ _Mcf_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gal or kgal or Mgal or cf or ccf or kcf or Mcf'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:TotalSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:TotalDollarSavings'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:PctReduction'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:RainBarrels'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType/h:ReclaimedWaterSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterSavingsType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_supply_ _return_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'supply or return'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:LeakinessObservedVisualInspection'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_connections sealed w mastic_ _no observable leaks_ _some observable leaks_ _significant leaks_ _catastrophic leaks_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'connections sealed w mastic or no observable leaks or some observable leaks or significant leaks or catastrophic leaks'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctLeakageTestMethod'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_duct leakage tester_ _blower door subtract_ _pressure pan_ _visual inspection_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'duct leakage tester or blower door subtract or pressure pan or visual inspection'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctLeakage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:EffectiveLeakageArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctLeakage/h:Units'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_CFM50_ _CFM25_ _CFM per Std 152_ _Percent_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CFM50 or CFM25 or CFM per Std 152 or Percent'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctLeakage/h:Value'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:DuctLeakageMeasurementType/h:DuctLeakage/h:TotalOrToOutside'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_to outside_ _total_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'to outside or total'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:UtilityID'/>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionType'/>
    <sch:rule context='//h:ConsumptionInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail'/>
    <sch:rule context='//h:ConsumptionInfoType/h:MarginalRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:BaseLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:BPI2400Inputs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail/h:Consumption'/>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail/h:StartDateTime'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail/h:EndDateTime'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail/h:ReadingType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_point_ _median_ _average_ _total_ _estimate_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'point or median or average or total or estimate or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail/h:ConsumptionCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConsumptionInfoType/h:ConsumptionDetail'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:WeatherRegressionBeginDate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:WeatherRegressionEndDate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:CalibrationQualification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_none_ _detailed_ _simple_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'none or detailed or simple'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:CalibrationWeatherRegressionCVRMSE'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:WeatherNormalizedHeatingUsage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:WeatherNormalizedCoolingUsage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:WeatherNormalizedBaseloadUsage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationHeatingBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationHeatingAbsoluteError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationCoolingBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationCoolingAbsoluteError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationBaseloadBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:DetailedModelCalibrationBaseloadAbsoluteError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:SimplifiedModelCalibrationHeatingBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:SimplifiedModelCalibrationCoolingBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:SimplifiedModelCalibrationBaseloadBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs/h:SimplifiedModelCalibrationTotalBiasError'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BPI2400Inputs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy'/>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water'/>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:FuelType'>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:UnitofMeasure'>
      <sch:assert role='ERROR' test='contains(&quot;_cmh_ _ccf_ _kcf_ _Mcf_ _cfh_ _kWh_ _MWh_ _Btu_ _kBtu_ _MBtu_ _therms_ _lbs_ _kLbs_ _MLbs_ _tonnes_ _cords_ _gal_ _kgal_ _ton hours_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'cmh or ccf or kcf or Mcf or cfh or kWh or MWh or Btu or kBtu or MBtu or therms or lbs or kLbs or MLbs or tonnes or cords or gal or kgal or ton hours'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:MeteringConfiguration'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_direct metering_ _master meter without sub-metering_ _master meter with sub-metering_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'direct metering or master meter without sub-metering or master meter with sub-metering'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EmissionsFactors'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:FuelInterruptibility'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_interruptible_ _firm_ _na_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'interruptible or firm or na'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:SharedEnergySystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_yes_ _no_ _common meter_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'yes or no or common meter'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:IntervalType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_15-minute_ _hourly_ _daily_ _monthly_ _annual_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '15-minute or hourly or daily or monthly or annual'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:ReadingTimeZone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:MarginalEnergyCostRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EnergyUseIntensity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:PeakSeason'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_summer_ _winter_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'summer or winter'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EmissionsFactors/h:EmissionsFactor'/>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EmissionsFactors/h:EmissionsFactor/h:EmissionType'>
      <sch:assert role='ERROR' test='contains(&quot;_CO2_ _methane_ _N2O_ _CO2 equivalent_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CO2 or methane or N2O or CO2 equivalent'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EmissionsFactors/h:EmissionsFactor/h:EmissionUnits'>
      <sch:assert role='ERROR' test='contains(&quot;_kg_ _ton_ _metric ton_ _pound_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kg or ton or metric ton or pound'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Energy/h:EmissionsFactors/h:EmissionsFactor/h:Emissions'/>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:WaterType'>
      <sch:assert role='ERROR' test='contains(&quot;_indoor and outdoor water_ _indoor water_ _outdoor water_ _wastewater/sewer_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'indoor and outdoor water or indoor water or outdoor water or wastewater/sewer'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:UnitofMeasure'>
      <sch:assert role='ERROR' test='contains(&quot;_gal_ _kgal_ _Mgal_ _cf_ _ccf_ _kcf_ _Mcf_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gal or kgal or Mgal or cf or ccf or kcf or Mcf'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:MarginalWaterCostRate'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:WaterUseIntensity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:WaterUseIntensity/h:Units'>
      <sch:assert role='ERROR' test='contains(&quot;_gal/sq.ft._ _gal/day/person_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'gal/sq.ft. or gal/day/person'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EnergyAndWaterUseTypeDescription/h:Water/h:WaterUseIntensity/h:Value'/>
    <sch:rule context='//h:ModeledUsageType/h:EnergyType'>
      <sch:assert role='ERROR' test='contains(&quot;_electricity_ _renewable electricity_ _natural gas_ _renewable natural gas_ _fuel oil_ _fuel oil 1_ _fuel oil 2_ _fuel oil 4_ _fuel oil 5/6_ _district steam_ _district hot water_ _district chilled water_ _solar hot water_ _propane_ _kerosene_ _diesel_ _coal_ _anthracite coal_ _bituminous coal_ _coke_ _wood_ _wood pellets_ _combination_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'electricity or renewable electricity or natural gas or renewable natural gas or fuel oil or fuel oil 1 or fuel oil 2 or fuel oil 4 or fuel oil 5/6 or district steam or district hot water or district chilled water or solar hot water or propane or kerosene or diesel or coal or anthracite coal or bituminous coal or coke or wood or wood pellets or combination or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:UnitofMeasure'>
      <sch:assert role='ERROR' test='contains(&quot;_cmh_ _ccf_ _kcf_ _Mcf_ _cfh_ _kWh_ _MWh_ _Btu_ _kBtu_ _MBtu_ _therms_ _lbs_ _kLbs_ _MLbs_ _tonnes_ _cords_ _gal_ _kgal_ _ton hours_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'cmh or ccf or kcf or Mcf or cfh or kWh or MWh or Btu or kBtu or MBtu or therms or lbs or kLbs or MLbs or tonnes or cords or gal or kgal or ton hours'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:AnnualConsumption'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:AnnualFuelCost'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:ConsumptionByEndUse'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:BaseLoad'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType/h:ElectricityDemandKW'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ModeledUsageType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:StudProperties/h:Size'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_2x2_ _2x3_ _2x4_ _2x6_ _2x8_ _2x10_ _2x12_ _2x14_ _2x16_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: '2x2 or 2x3 or 2x4 or 2x6 or 2x8 or 2x10 or 2x12 or 2x14 or 2x16 or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:StudProperties/h:Spacing'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:StudProperties/h:FramingFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:StudProperties/h:Material'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_wood_ _metal_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'wood or metal'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:StudProperties'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:TelephoneInfoType/h:TelephoneType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_day_ _evening_ _mobile_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'day or evening or mobile'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:TelephoneInfoType/h:TelephoneNumber'/>
    <sch:rule context='//h:TelephoneInfoType/h:PreferredContactMethod'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:TelephoneInfoType/h:TelephoneExtension'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:TelephoneInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EmailInfoType/h:EmailType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_personal_ _work_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'personal or work or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:EmailInfoType/h:EmailAddress'/>
    <sch:rule context='//h:EmailInfoType/h:PreferredContactMethod'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:EmailInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:BusinessName'/>
    <sch:rule context='//h:BusinessInfoType/h:BusinessType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_contractor_ _auditor_ _subcontractor_ _property manager_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'contractor or auditor or subcontractor or property manager'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:BusinessSpecialization'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_energy audit_ _hvac_ _insulation_ _carpentry_ _plumbing_ _electrical_ _painting_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'energy audit or hvac or insulation or carpentry or plumbing or electrical or painting or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:Certification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_BPI_ _RESNET_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'BPI or RESNET or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:BusinessContact'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:TelephoneInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType/h:EmailInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactInfoType/h:ContactType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactInfoType/h:Person'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:BusinessContactInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Area'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Quantity'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Azimuth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Orientation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_north_ _northwest_ _west_ _southwest_ _south_ _southeast_ _east_ _northeast_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'north or northwest or west or southwest or south or southeast or east or northeast'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:FrameType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:GlassLayers'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_single-pane_ _double-pane_ _triple-pane_ _multi-layered_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'single-pane or double-pane or triple-pane or multi-layered or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:GlassType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low-e_ _tinted_ _reflective_ _tinted/reflective_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low-e or tinted or reflective or tinted/reflective or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:GasFill'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_air_ _argon_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'air or argon or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Condition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_good_ _moderate_ _poor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'good or moderate or poor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:UFactor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:SHGC'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:VisibleTransmittance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:NFRCCertified'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ThirdPartyCertification'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Energy Star_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Energy Star or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:WindowFilm'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ExteriorShading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:InteriorShading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:MoveableInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Overhangs'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:WeatherStripping'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Operable'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:FractionOperable'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:LeakinessDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_very tight_ _tight_ _average_ _leaky_ _very leaky_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'very tight or tight or average or leaky or very leaky'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:WindowFilm/h:ShadingCoefficient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:WindowFilm'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ExteriorShading/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_external overhangs_ _awnings_ _solar screens_ _solar film_ _deciduous tree_ _evergreen tree_ _building_ _other_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'external overhangs or awnings or solar screens or solar film or deciduous tree or evergreen tree or building or other or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ExteriorShading/h:SummerShadingCoefficient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ExteriorShading/h:WinterShadingCoefficient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:ExteriorShading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:InteriorShading/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_light blinds_ _dark blinds_ _light shades_ _dark shades_ _light curtains_ _dark curtains_ _none_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'light blinds or dark blinds or light shades or dark shades or light curtains or dark curtains or none'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:InteriorShading/h:SummerShadingCoefficient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:InteriorShading/h:WinterShadingCoefficient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:InteriorShading'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow/h:GlassType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_low-e_ _tinted_ _reflective_ _tinted/reflective_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'low-e or tinted or reflective or tinted/reflective or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow/h:FrameType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow/h:Operable'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow/h:FractionOperable'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow/h:Condition'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_good_ _moderate_ _poor_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'good or moderate or poor'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:StormWindow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:MoveableInsulation/h:RValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:MoveableInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Overhangs/h:Depth'/>
    <sch:rule context='//h:WindowInfo/h:Overhangs/h:DistanceToTopOfWindow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowInfo/h:Overhangs/h:DistanceToBottomOfWindow'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Aluminum'/>
    <sch:rule context='//h:WindowFrameType/h:Composite'/>
    <sch:rule context='//h:WindowFrameType/h:Fiberglass'/>
    <sch:rule context='//h:WindowFrameType/h:Metal'/>
    <sch:rule context='//h:WindowFrameType/h:Vinyl'/>
    <sch:rule context='//h:WindowFrameType/h:Wood'/>
    <sch:rule context='//h:WindowFrameType/h:Other'/>
    <sch:rule context='//h:WindowFrameType/h:Aluminum/h:ThermalBreak'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Aluminum'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Composite'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Fiberglass'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Metal/h:ThermalBreak'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Metal'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Vinyl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Wood'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Other/h:Description'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WindowFrameType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Job'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Locations'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Contractor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Job/h:Measures'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Job/h:JobRole'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Job/h:Measures/h:Measure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AssociationsType/h:Locations/h:Location'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:Date'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:BusinessConductingTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:IndividualConductingTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:OutsideTemperature'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:WindConditions'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_windy_ _normal_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'windy or normal'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:TypeOfInfiltrationMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_blower door_ _tracer gas_ _estimate_ _checklist_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'blower door or tracer gas or estimate or checklist'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:TypeOfBlowerDoorTest'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_pressurization_ _depressurization_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'pressurization or depressurization'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:HousePressure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:FanPressure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:FanRingUsed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_open_ _A_ _B_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'open or A or B'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:LeakinessDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_very tight_ _tight_ _average_ _leaky_ _very leaky_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'very tight or tight or average or leaky or very leaky'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:BuildingAirLeakage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:EffectiveLeakageArea'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:InfiltrationVolume'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:BuildingAirLeakage/h:UnitofMeasure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_CFM_ _CFMnatural_ _ACH_ _ACHnatural_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CFM or CFMnatural or ACH or ACHnatural'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:AirInfiltrationMeasurementType/h:BuildingAirLeakage/h:AirLeakage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_CFM_ _CFMnatural_ _ACH_ _ACHnatural_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CFM or CFMnatural or ACH or ACHnatural'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MoistureControlInfoType/h:ExteriorLocationsWaterIntrusionorDamage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_roof_ _interior ceiling_ _foundation_ _basement_ _crawlspace_ _walls_ _around windows_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'roof or interior ceiling or foundation or basement or crawlspace or walls or around windows or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MoistureControlInfoType/h:InteriorLocationsofWaterLeaksorDamage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_kitchen _ _bathroom_ _basement_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'kitchen  or bathroom or basement or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:MoistureControlInfoType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Basement'/>
    <sch:rule context='//h:FoundationType/h:Crawlspace'/>
    <sch:rule context='//h:FoundationType/h:SlabOnGrade'/>
    <sch:rule context='//h:FoundationType/h:Garage'/>
    <sch:rule context='//h:FoundationType/h:AboveApartment'/>
    <sch:rule context='//h:FoundationType/h:Combination'/>
    <sch:rule context='//h:FoundationType/h:Ambient'/>
    <sch:rule context='//h:FoundationType/h:RubbleStone'/>
    <sch:rule context='//h:FoundationType/h:Other'/>
    <sch:rule context='//h:FoundationType/h:Basement/h:Finished'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Basement/h:Conditioned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Basement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Crawlspace/h:Vented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Crawlspace/h:Conditioned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Crawlspace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:SlabOnGrade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Garage/h:Conditioned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Garage'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:AboveApartment'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Combination'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Ambient'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:RubbleStone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:FoundationType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:WoodStud'/>
    <sch:rule context='//h:WallType/h:DoubleWoodStud'/>
    <sch:rule context='//h:WallType/h:ConcreteMasonryUnit'/>
    <sch:rule context='//h:WallType/h:StructurallyInsulatedPanel'/>
    <sch:rule context='//h:WallType/h:InsulatedConcreteForms'/>
    <sch:rule context='//h:WallType/h:SteelFrame'/>
    <sch:rule context='//h:WallType/h:SolidConcrete'/>
    <sch:rule context='//h:WallType/h:StructuralBrick'/>
    <sch:rule context='//h:WallType/h:StrawBale'/>
    <sch:rule context='//h:WallType/h:Stone'/>
    <sch:rule context='//h:WallType/h:LogWall'/>
    <sch:rule context='//h:WallType/h:Adobe'/>
    <sch:rule context='//h:WallType/h:Other'/>
    <sch:rule context='//h:WallType/h:WoodStud/h:ExpandedPolystyreneSheathing'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:WoodStud/h:OptimumValueEngineering'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:WoodStud'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:DoubleWoodStud/h:Staggered'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:DoubleWoodStud'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:ConcreteMasonryUnit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:StructurallyInsulatedPanel'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:InsulatedConcreteForms'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:SteelFrame'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:SolidConcrete'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:StructuralBrick'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:StrawBale'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:Stone'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:LogWall'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:Adobe'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:ControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_programmable thermostat_ _manual thermostat_ _digital thermostat_ _timer_ _EMCS_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'programmable thermostat or manual thermostat or digital thermostat or timer or EMCS or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:SetpointTempHeatingSeason'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:SetbackTempHeatingSeason'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:TotalSetbackHoursperWeekHeating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:SetupTempCoolingSeason'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:SetpointTempCoolingSeason'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:TotalSetupHoursperWeekCooling'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:HotWaterResetControl'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_seasonal_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'seasonal or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:HeatLowered'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:ACAdjusted'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:FractionThermostaticRadiatorValves'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:FractionElectronicZoneValves'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType/h:HVACSystemsServed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlTypeAdjustments/h:Day'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlTypeAdjustments/h:Night'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACControlTypeAdjustments'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo/h:VaporRetardersInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo/h:GuttersInstalledorRepaired'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo/h:FlashingInstalledorRepaired'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo/h:FoundationGradingImproved'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo/h:OtherMeasuresImplementedDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:MoistureControlImprovementInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo/h:DuctSystemSealed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo/h:DuctSystemSealedYearMonth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo/h:DuctOutsideEnvelopeInsulatedaspartofRetrofit'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo/h:DuctSystemReplaced'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo/h:SystemPumpandZoneValveCorrectionsMade'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACDistributionImprovementInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:TuneAndRepair'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:TuneAndRepairYearMonth'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:NumberofCoilsReplaced'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:NumberofAirHandlersReplaced'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:Size'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:MERVRating'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:LastReplaced'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:Size/h:Width'/>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:Size/h:Length'/>
    <sch:rule context='//h:HVACMaintenance/h:AirFilter/h:Size/h:Thickness'/>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:JacketInstalledIndicator'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:DispositionofExistingSystem'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:RepairsDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:PipeInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:LengthofPipeInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:DiameterofPipeInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo/h:SystemReplaced'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WaterHeaterImprovementInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:VentilationImprovementInfo/h:GarageDuctsandAirHandlersAirSealed'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:VentilationImprovementInfo/h:MechanicalVentilationInstalled'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:VentilationImprovementInfo'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:BuildingID'/>
    <sch:rule context='//h:Building'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:CustomerID'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:Site'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:ContractorID'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building'/>
    <sch:rule context='//h:Building/h:BuildingDetails'/>
    <sch:rule context='//h:Building/h:ModeledUsages'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:Site/h:SiteID'/>
    <sch:rule context='//h:Building/h:Site'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:Site/h:Address'/>
    <sch:rule context='//h:Building/h:Site/h:SchoolDistrict'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:Site/h:eGridRegion'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Alaska_ _Eastern_ _ERCOT_ _Hawaii_ _Western_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Alaska or Eastern or ERCOT or Hawaii or Western'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:Building/h:Site'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:ModeledUsages/h:WeatherStation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Building/h:ModeledUsages/h:ModeledUsage'/>
    <sch:rule context='//h:Project/h:ProjectID'/>
    <sch:rule context='//h:Project/h:PreBuildingID'/>
    <sch:rule context='//h:Project/h:PostBuildingID'/>
    <sch:rule context='//h:Project/h:ProjectDetails'/>
    <sch:rule context='//h:Project'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Contractor/h:ContractorDetails'/>
    <sch:rule context='//h:Contractor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer/h:CustomerDetails'/>
    <sch:rule context='//h:Customer/h:Comments'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer/h:OtherContact'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer/h:CustomerDetails/h:Person'/>
    <sch:rule context='//h:Customer/h:CustomerDetails/h:MailingAddress'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer/h:CustomerDetails'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Customer/h:Comments/h:Comment'/>
    <sch:rule context='//h:Customer/h:OtherContact/h:Person'/>
    <sch:rule context='//h:Customer/h:OtherContact/h:Address'/>
    <sch:rule context='//h:Customer/h:OtherContact'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Utility/h:UtilitiesorFuelProviders'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Utility'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Utility/h:UtilitiesorFuelProviders'/>
    <sch:rule context='//h:Consumption/h:BuildingID'/>
    <sch:rule context='//h:Consumption/h:CustomerID'/>
    <sch:rule context='//h:Consumption/h:ConsumptionDetails'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Consumption'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:Consumption/h:ConsumptionDetails/h:ConsumptionInfo'/>
    <sch:rule context='//h:WeatherStation/h:Name'/>
    <sch:rule context='//h:WeatherStation/h:City'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WeatherStation/h:State'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WeatherStation/h:WBAN'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WeatherStation/h:WMO'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WeatherStation/h:Type'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_TMY_ _TMY2_ _TMY3_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'TMY or TMY2 or TMY3 or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WeatherStation/h:Use'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_billing analysis_ _energy modeling_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'billing analysis or energy modeling'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:WeatherStation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:PipeInsulationType/h:PipeRValue'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:PipeInsulationType/h:PipeLengthInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:PipeInsulationType/h:PipeDiameterInsulated'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:PipeInsulationType/h:FractionPipeInsulation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:PipeInsulationType'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:TotalExternalStaticPressureMeasurement/h:StaticPressure'/>
    <sch:rule context='//h:TotalExternalStaticPressureMeasurement/h:MeasurementLocation'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_in ducts_ _at equipment_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'in ducts or at equipment'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:TotalExternalStaticPressureMeasurement/h:LocationDescription'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:TotalExternalStaticPressureMeasurement/h:StaticPressureSource'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_as measured_ _per design report_ _per OEM documentation_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'as measured or per design report or per OEM documentation'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:TotalExternalStaticPressureMeasurement'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:SealedCombustion'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:AtmosphericBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:PowerBurner'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:AutomaticVentDamper'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:PilotLight'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:IntermittentIgnitionDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace/h:RetentionHead'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:WallAndFloorFurnace'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:Attic'/>
    <sch:rule context='//h:AtticType/h:CathedralCeiling'/>
    <sch:rule context='//h:AtticType/h:FlatRoof'/>
    <sch:rule context='//h:AtticType/h:Other'/>
    <sch:rule context='//h:AtticType/h:Attic/h:Vented'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:Attic/h:Conditioned'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:Attic/h:CapeCod'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:Attic'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:CathedralCeiling'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:FlatRoof'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:AtticType/h:Other'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:VentilationType/h:UnitofMeasure'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_SLA_ _ACHnatural_ _CFM per sq.ft._&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'SLA or ACHnatural or CFM per sq.ft.'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:VentilationType/h:Value'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_CFM_ _CFMnatural_ _ACH_ _ACHnatural_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'CFM or CFMnatural or ACH or ACHnatural'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:PipeDiameterType/h:PipeDiameter'>
      <sch:assert role='ERROR' test='count(.) &lt;= 3'/>
    </sch:rule>
    <sch:rule context='//h:PipeDiameterType/h:PipeDiameter/h:Dimension'>
      <sch:assert role='ERROR' test='contains(&quot;_inner_ _outer_ _nominal_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'inner or outer or nominal'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:PipeDiameterType/h:PipeDiameter/h:Value'/>
    <sch:rule context='//h:ExternalResource/h:URL'/>
    <sch:rule context='//h:ExternalResource/h:Type'>
      <sch:assert role='ERROR' test='contains(&quot;_photo_ _illustration_ _document_ _spreadsheet_ _website_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'photo or illustration or document or spreadsheet or website or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ExternalResource/h:Description'/>
    <sch:rule context='//h:ExternalResource'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConnectedDevice/h:IsConnected'/>
    <sch:rule context='//h:ConnectedDevice/h:CommunicatesWith'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConnectedDevice/h:CommunicationProtocol'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
      <sch:assert role='ERROR' test='contains(&quot;_Wi-Fi_ _Zigbee_ _Z-wave_ _Ethernet_ _Bluetooth_ _LTE_ _cellular modem_ _other_&quot;, concat(&quot;_&quot;, text(), &quot;_&quot;))'>Expected 'text()' for xpath: 'Wi-Fi or Zigbee or Z-wave or Ethernet or Bluetooth or LTE or cellular modem or other'</sch:assert>
    </sch:rule>
    <sch:rule context='//h:ConnectedDevice/h:DemandResponseCapability'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConnectedDevice/h:OccupancySensor'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
    <sch:rule context='//h:ConnectedDevice'>
      <sch:assert role='ERROR' test='count(.) &gt;= 0'/>
    </sch:rule>
  </sch:pattern>
</sch:schema>