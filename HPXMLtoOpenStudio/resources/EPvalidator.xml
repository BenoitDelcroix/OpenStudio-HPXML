<?xml version="1.0" encoding="UTF-8"?>
<sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <sch:title>HPXML Schematron Validator</sch:title>
  <sch:ns uri='http://hpxmlonline.com/2019/10' prefix='h'/>
  <sch:pattern>
    <sch:title>EnergyPlus Validator</sch:title>
    <!-- Root -->
    <sch:rule context="/h:HPXML/h:XMLTransactionHeaderInformation">
      <sch:assert test="count(h:XMLType) = 1">element 'XMLType' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:XMLGeneratedBy) = 1">element 'XMLGeneratedBy' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:CreatedDateAndTime) = 1">element 'CreatedDateAndTime' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Transaction) = 1">element 'Transaction' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:SoftwareInfo">
      <sch:assert test="count(h:extension/h:SimulationControl) &lt;= 1">element 'extension/SimulationControl' is OPTIONAL</sch:assert> <!-- See [SimulationControl] -->
    </sch:rule>
    <sch:rule context="/h:HPXML">
      <sch:assert test="count(h:Building) = 1">element 'Building' is REQUIRED</sch:assert> <!-- FIXME: Does this need to be count(h:Building) &gt;= 1? -->
      <sch:assert test="count(h:Building/h:BuildingID) = 1">element 'Building/BuildingID' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Building/h:ProjectStatus/h:EventType) = 1">element 'Building/ProjectStatus/EventType' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary">
      <sch:assert test="not(h:Site/h:SiteType) or count(h:Site/h:SiteType[text()='urban' or text()='suburban' or text()='rural']) = 1">element 'Site/SiteType' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:Site/h:extension/h:ShelterCoefficient) &lt;= 1">element 'extension/ShelterCoefficient' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:Site/h:extension/h:Neighbors) &lt;= 1">element 'extension/Neighbors' is OPTIONAL</sch:assert> <!-- See [Neighbors] -->
      <sch:assert test="count(h:BuildingOccupancy/h:NumberofResidents) &lt;= 1">element 'BuildingOccupancy/NumberofResidents' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:BuildingConstruction) = 1">element 'BuildingConstruction' is REQUIRED</sch:assert> <!-- See [BuildingConstruction] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:ClimateandRiskZones">
      <sch:assert test="count(h:ClimateZoneIECC) &lt;= 1">element 'ClimateZoneIECC' is OPTIONAL</sch:assert> <!-- See [ClimateZone] -->
      <sch:assert test="count(h:WeatherStation) = 1">element 'WeatherStation' is REQUIRED</sch:assert> <!-- See [WeatherStation] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:AirInfiltration">
      <sch:assert test="((number(h:AirInfiltrationMeasurement/h:HousePressure) = 50 and count(h:AirInfiltrationMeasurement[h:BuildingAirLeakage/h:UnitofMeasure[text()='ACH' or text()='CFM']]) = 1) or (count(h:AirInfiltrationMeasurement[h:BuildingAirLeakage/h:UnitofMeasure[text()='ACHnatural']]) = 1))">Air leakage must be provided in one of three ways: (a) nACH (natural air changes per hour), (b) ACH50 (air changes per hour at 50Pa), or (c) CFM50 (cubic feet per minute at 50Pa)</sch:assert> <!-- see [AirInfiltration] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure">
      <sch:assert test="count(h:Roofs/h:Roof) &gt;= 0">element 'Roofs/Roof' is OPTIONAL</sch:assert> <!-- see [Roof] -->
      <sch:assert test="count(h:Walls/h:Wall) &gt;= 1">the number of element 'Walls/Wall' MUST be greater than or equal to 1</sch:assert> <!-- see [Wall] -->
      <sch:assert test="count(h:RimJoists/h:RimJoist) &gt;= 0">element 'RimJoists/RimJoist' is OPTIONAL</sch:assert> <!-- see [RimJoist] -->
      <sch:assert test="count(h:FoundationWalls/h:FoundationWall) &gt;= 0">element 'FoundationWalls/FoundationWall' is OPTIONAL</sch:assert> <!-- see [FoundationWall] -->
      <sch:assert test="count(h:FrameFloors/h:FrameFloor) &gt;= 0">element 'FrameFloors/FrameFloor' is OPTIONAL</sch:assert> <!-- see [FrameFloor] -->
      <sch:assert test="count(h:Slabs/h:Slab) &gt;= 0">element 'Slabs/Slab' is OPTIONAL</sch:assert> <!-- see [Slab] -->
      <sch:assert test="count(h:Windows/h:Window) &gt;= 0">element 'Windows/Window' is OPTIONAL</sch:assert> <!-- see [Window] -->
      <sch:assert test="count(h:Skylights/h:Skylight) &gt;= 0">element 'Skylights/Skylight' is OPTIONAL</sch:assert> <!-- see [Skylight] -->
      <sch:assert test="count(h:Doors/h:Door) &gt;= 0">element 'Doors/Door' is OPTIONAL</sch:assert> <!-- see [Door] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC">
      <sch:assert test="count(h:HVACPlant/h:HeatingSystem) &gt;= 0">element 'HVACPlant/HeatingSystem' is OPTIONAL</sch:assert> <!-- see [HeatingSystem] -->
      <sch:assert test="count(h:HVACPlant/h:CoolingSystem) &gt;= 0">element 'HVACPlant/CoolingSystem' is OPTIONAL</sch:assert> <!-- see [CoolingSystem] -->
      <sch:assert test="count(h:HVACPlant/h:HeatPump) &gt;= 0">element 'HVACPlant/HeatPump' is OPTIONAL</sch:assert> <!-- see [HeatPump] -->
      <sch:assert test="count(h:HVACControl) &lt;= 1">element 'HVACControl' is OPTIONAL</sch:assert> <!-- see [HVACControl] -->
      <sch:assert test="count(h:HVACDistribution) &gt;= 0">element 'HVACDistribution' is OPTIONAL</sch:assert> <!-- see [HVACDistribution] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans">
      <sch:assert test="count(VentilationFan[UsedForWholeBuildingVentilation='true']) &lt;= 1">element 'VentilationFan[UsedForWholeBuildingVentilation='true']' is OPTIONAL</sch:assert> <!-- See [MechanicalVentilation] -->
      <sch:assert test="count(VentilationFan[UsedForLocalVentilation='true' and FanLocation='kitchen']) &lt;= 1">element 'VentilationFan[UsedForLocalVentilation='true' and FanLocation='kitchen']' is OPTIONAL</sch:assert> <!-- See [KitchenRangeFan] -->
      <sch:assert test="count(VentilationFan[UsedForLocalVentilation='true' and FanLocation='bath']) &lt;= 1">element 'VentilationFan[UsedForLocalVentilation='true' and FanLocation='bath']' is OPTIONAL</sch:assert> <!-- See [BathFan] -->
      <sch:assert test="count(VentilationFan[UsedForSeasonalCoolingLoadReduction='true']) &lt;= 1">element 'VentilationFan[UsedForSeasonalCoolingLoadReduction='true']' is OPTIONAL</sch:assert> <!-- See [WholeHouseFan] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems">
      <sch:assert test="count(h:WaterHeating/h:WaterHeatingSystem) &gt;= 0">element 'WaterHeating/WaterHeatingSystem' is OPTIONAL</sch:assert> <!-- See [WaterHeatingSystem] -->
      <sch:assert test="count(h:WaterHeating/h:HotWaterDistribution) &lt;= 1">element 'WaterHeating/HotWaterDistribution' is OPTIONAL</sch:assert> <!-- See [HotWaterDistribution] -->
      <sch:assert test="count(h:WaterHeating/h:WaterFixture) &gt;= 0">element 'WaterHeating/WaterFixture' is OPTIONAL</sch:assert> <!-- See [WaterFixture] -->
      <sch:assert test="count(h:SolarThermal/h:SolarThermalSystem) &lt;= 1">element 'SolarThermal/SolarThermalSystem' is OPTIONAL</sch:assert> <!-- See [SolarThermalSystem] -->
      <sch:assert test="count(h:Photovoltaics/h:PVSystem) &gt;= 0">element 'Photovoltaics/PVSystem' is OPTIONAL</sch:assert> <!-- See [PVSystem] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Appliances">
      <sch:assert test="count(h:ClothesWasher) &lt;= 1">element 'ClothesWasher' is OPTIONAL</sch:assert> <!-- See [ClothesWasher] -->
      <sch:assert test="count(h:ClothesDryer) &lt;= 1">element 'ClothesDryer' is OPTIONAL</sch:assert> <!-- See [ClothesDryer] -->
      <sch:assert test="count(h:Dishwasher) &lt;= 1">element 'Dishwasher' is OPTIONAL</sch:assert> <!-- See [Dishwasher] -->
      <sch:assert test="count(h:Refrigerator) &lt;= 1">element 'Refrigerator' is OPTIONAL</sch:assert> <!-- See [Refrigerator] -->
      <sch:assert test="count(h:Dehumidifier) &lt;= 1">element 'Dehumidifier' is OPTIONAL</sch:assert> <!-- See [Dehumidifier] -->
      <sch:assert test="count(h:CookingRange) &lt;= 1">element 'CookingRange' is OPTIONAL</sch:assert> <!-- See [CookingRange] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails">
      <sch:assert test="count(h:Lighting) &lt;= 1">element 'Lighting' is OPTIONAL</sch:assert> <!-- See [Lighting] -->
      <sch:assert test="count(h:Lighting/h:CeilingFan) &lt;= 1">element 'Lighting/CeilingFan' is OPTIONAL</sch:assert> <!-- See [CeilingFan] -->
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:MiscLoads">
      <sch:assert test="count(h:PlugLoad[PlugLoadType='other']) &lt;= 1">element 'PlugLoad[PlugLoadType='other']' is OPTIONAL</sch:assert> <!-- See [PlugLoads] -->
      <sch:assert test="count(h:PlugLoad[PlugLoadType='TV other']) &lt;= 1">element 'PlugLoad[PlugLoadType='TV other']' is OPTIONAL</sch:assert> <!-- See [Television] -->
    </sch:rule>
    <!-- [SimulationControl] -->
    <sch:rule context="/h:HPXML/h:SoftwareInfo/h:extension/h:SimulationControl">
      <sch:assert test="count(h:Timestep) &lt;= 1">element 'Timestep' is OPTIONAL</sch:assert>
      <sch:assert test="((count(h:BeginMonth) = 0 and count(h:BeginDayOfMonth) = 0) or (count(h:BeginMonth) = 1 and count(h:BeginDayOfMonth) = 1))">Both 'BeginMonth' and 'BeginDayOfMonth' must be either blank or provided</sch:assert>
      <sch:assert test="((count(h:EndMonth) = 0 and count(h:EndDayOfMonth) = 0) or (count(h:EndMonth) = 1 and count(h:EndDayOfMonth) = 1))">Both 'EndMonth' and 'EndDayOfMonth' must be either blank or provided</sch:assert>
    </sch:rule>
    <!-- [BuildingConstruction] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:BuildingConstruction">
      <sch:assert test="count(h:NumberofConditionedFloors) = 1">element 'NumberofConditionedFloors' is REQUIRED</sch:assert>
      <sch:assert test="count(h:NumberofConditionedFloorsAboveGrade) = 1">element 'NumberofConditionedFloorsAboveGrade' is REQUIRED</sch:assert>
      <sch:assert test="count(h:NumberofBedrooms) = 1">element 'NumberofBedrooms' is REQUIRED</sch:assert>
      <sch:assert test="count(h:NumberofBathrooms) &lt;= 1">element 'NumberofBathrooms' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:ConditionedFloorArea) = 1">element 'ConditionedFloorArea' is REQUIRED</sch:assert>
      <sch:assert test="not(count(h:ConditionedBuildingVolume) = 0 and count(h:AverageCeilingHeight) = 0)">either element 'ConditionedBuildingVolume' or element 'AverageCeilingHeight' must be provided</sch:assert>
    </sch:rule>
    <!-- [Neighbors] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:Site/h:extension/h:Neighbors">
      <sch:assert test="count(h:NeighborBuilding) &gt;= 1">element 'NeighborBuilding' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [NeighborBuilding] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:BuildingSummary/h:Site/h:extension/h:Neighbors/h:NeighborBuilding">
      <sch:assert test="count(h:Azimuth) = 1">element 'Azimuth' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Distance) = 1">element 'Distance' is REQUIRED</sch:assert> <!-- ft -->
      <sch:assert test="count(h:Height) &lt;= 1">element 'Height' is OPTIONAL</sch:assert> <!-- ft; if omitted, the neighbor is the same height as the main building -->
    </sch:rule>
    <!-- [ClimateZone] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:ClimateandRiskZones/h:ClimateZoneIECC">
      <sch:assert test="count(h:Year) = 1">element 'Year' is REQUIRED</sch:assert>
      <sch:assert test="count(h:ClimateZone[text()='1A' or text()='1B' or text()='1C' or text()='2A' or text()='2B' or text()='2C' or text()='3A' or text()='3B' or text()='3C' or text()='4A' or text()='4B' or text()='4C' or text()='5A' or text()='5B' or text()='5C' or text()='6A' or text()='6B' or text()='6C' or text()='7' or text()='8']) = 1">element 'ClimateZone' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [WeatherStation] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:ClimateandRiskZones/h:WeatherStation">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Name) = 1">element 'Name' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="(count(h:WMO) = 1 or count(h:extension/h:EPWFilePath) = 1)">either element 'WMO' or element 'extension/EPWFilePath' is REQUIRED</sch:assert> <!-- Reference weather/data.csv for the list of acceptable WMO station numbers -->
    </sch:rule>
    <!-- [AirInfiltration] -->
    <!-- FIXME: Can we combine two rules below in schematron context? -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:AirInfiltration/h:AirInfiltrationMeasurement[number(h:HousePressure) = 50 and h:BuildingAirLeakage/h:UnitofMeasure[text()='ACH' or text()='CFM']]">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:BuildingAirLeakage/h:AirLeakage) = 1">element 'BuildingAirLeakage/AirLeakage' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InfiltrationVolume) &lt;= 1">element 'InfiltrationVolume' is OPTIONAL</sch:assert>
    </sch:rule>
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:AirInfiltration/h:AirInfiltrationMeasurement[h:BuildingAirLeakage/h:UnitofMeasure[text()='ACHnatural']]">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:BuildingAirLeakage/h:AirLeakage) = 1">element 'BuildingAirLeakage/AirLeakage' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InfiltrationVolume) &lt;= 1">element 'InfiltrationVolume' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [Roof] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Roofs/h:Roof">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:InteriorAdjacentTo[text()='attic - vented' or text()='attic - unvented' or text()='living space' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) &lt;= 1">element 'Azimuth' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:SolarAbsorptance) = 1">element 'SolarAbsorptance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Emittance) = 1">element 'Emittance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Pitch) = 1">element 'Pitch' is REQUIRED</sch:assert>
      <sch:assert test="count(h:RadiantBarrier) = 1">element 'RadiantBarrier' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Insulation/h:SystemIdentifier) = 1">element 'Insulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [VentedAttic] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Roofs/h:Roof/h:InteriorAdjacentTo[text()='attic - vented']"> <!-- FIXME: Review this xpath -->
      <sch:assert test="count(/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Attics/h:Attic[h:AtticType/h:Attic[h:Vented='true']]/h:VentilationRate[h:UnitofMeasure='SLA' or h:UnitofMeasure='ACHnatural']/h:Value) &lt;= 1">element 'Attic/VentilationRate/Value' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [Wall] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Walls/h:Wall">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:ExteriorAdjacentTo[text()='outside' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage' or text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']) = 1">element 'ExteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InteriorAdjacentTo[text()='living space' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:WallType[h:WoodStud | h:DoubleWoodStud | h:ConcreteMasonryUnit | h:StructurallyInsulatedPanel | h:InsulatedConcreteForms | h:SteelFrame | h:SolidConcrete | h:StructuralBrick | h:StrawBale | h:Stone | h:LogWall]) = 1">element 'WallType' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) &lt;= 1">element 'Azimuth' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:SolarAbsorptance) = 1">element 'SolarAbsorptance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Emittance) = 1">element 'Emittance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Insulation/h:SystemIdentifier) = 1">element 'Insulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [RimJoist] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:RimJoists/h:RimJoist">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:ExteriorAdjacentTo[text()='outside' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage' or text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']) = 1">element 'ExteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InteriorAdjacentTo[text()='living space' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) &lt;= 1">element 'Azimuth' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:SolarAbsorptance) = 1">element 'SolarAbsorptance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Emittance) = 1">element 'Emittance' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Insulation/h:SystemIdentifier) = 1">element 'Insulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [FoundationWall] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:ExteriorAdjacentTo[text()='ground' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage' or text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']) = 1">element 'ExteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InteriorAdjacentTo[text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert> <!-- See [VentedCrawlspace] -->
      <sch:assert test="count(h:Height) = 1">element 'Height' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) &lt;= 1">element 'Azimuth' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:Thickness) = 1">element 'Thickness' is REQUIRED</sch:assert>
      <sch:assert test="count(h:DepthBelowGrade) = 1">element 'DepthBelowGrade' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Insulation/h:SystemIdentifier) = 1">element 'Insulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <!-- Insulation: either specify interior and exterior layers OR assembly R-value: -->
      <sch:assert test="count(h:Insulation/h:Layer[h:InstallationType='continuous - interior'] | h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/Layer[InstallationType='continuous - interior']' or 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert> <!-- See [FoundationWallInsLayer] -->
      <sch:assert test="count(h:Insulation/h:Layer[h:InstallationType='continuous - exterior'] | h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/Layer[InstallationType='continuous - exterior']' or 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert> <!-- See [FoundationWallInsLayer] -->
    </sch:rule>
    <!-- [VentedCrawlspace] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall/h:InteriorAdjacentTo[text()='crawlspace - vented']"> <!-- FIXME: Review this xpath -->
      <sch:assert test="count(/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Foundations/h:Foundation[h:FoundationType/h:Crawlspace[h:Vented='true']]/h:VentilationRate[h:UnitofMeasure='SLA']/h:Value) &lt;= 1">element 'Crawlspace/VentilationRate/Value' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [FoundationWallInsLayer] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FoundationWalls/h:FoundationWall/h:Insulation/h:Layer[h:InstallationType='continuous - exterior' or h:InstallationType='continuous - interior']">
      <sch:assert test="count(h:NominalRValue) = 1">element 'NominalRValue' is REQUIRED</sch:assert>
      <sch:assert test="count(h:extension/h:DistanceToTopOfInsulation) = 1">element 'extension/DistanceToTopOfInsulation' is REQUIRED</sch:assert> <!-- ft -->
      <sch:assert test="count(h:extension/h:DistanceToBottomOfInsulation) = 1">element 'extension/DistanceToBottomOfInsulation' is REQUIRED</sch:assert> <!-- ft -->
    </sch:rule>
    <!-- [FrameFloor] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FrameFloors/h:FrameFloor">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert>
      <sch:assert test="count(h:ExteriorAdjacentTo[text()='outside' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage' or text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']) = 1">element 'ExteriorAdjacentTo' is REQUIRED</sch:assert> <!-- See [FrameFloorAdjacentToOther] -->
      <sch:assert test="count(h:InteriorAdjacentTo[text()='living space' or text()='attic - vented' or text()='attic - unvented' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Insulation/h:SystemIdentifier) = 1">element 'Insulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Insulation/h:AssemblyEffectiveRValue) = 1">element 'Insulation/AssemblyEffectiveRValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [FrameFloorAdjacentToOther] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:FrameFloors/h:FrameFloor[h:ExteriorAdjacentTo[text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']]">
      <sch:assert test="count(h:extension/h:OtherSpaceAboveOrBelow[text()='above' or text()='below']) = 1">element 'extension/OtherSpaceAboveOrBelow' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [Slab] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Slabs/h:Slab">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:InteriorAdjacentTo[text()='living space' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='garage']) = 1">element 'InteriorAdjacentTo' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Thickness) = 1">element 'Thickness' is REQUIRED</sch:assert> <!-- Use zero for dirt floor -->
      <sch:assert test="count(h:ExposedPerimeter) = 1">element 'ExposedPerimeter' is REQUIRED</sch:assert>
      <sch:assert test="count(h:PerimeterInsulationDepth) = 1">element 'PerimeterInsulationDepth' is REQUIRED</sch:assert>
      <sch:assert test="count(h:UnderSlabInsulationWidth | h:UnderSlabInsulationSpansEntireSlab[text()='true']) = 1">element 'UnderSlabInsulationWidth' or 'UnderSlabInsulationSpansEntireSlab[text()="true"]' is REQUIRED</sch:assert>
      <sch:assert test="count(h:DepthBelowGrade | h:InteriorAdjacentTo[text()!='living space' and text()!='garage']) &gt;= 1">element 'DepthBelowGrade' is required when InteriorAdjacentTo is 'living space' or 'garage'</sch:assert> <!-- DepthBelowGrade only required when InteriorAdjacentTo is 'living space' or 'garage' -->
      <sch:assert test="count(h:PerimeterInsulation/h:SystemIdentifier) = 1">element 'PerimeterInsulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:PerimeterInsulation/h:Layer[h:InstallationType='continuous']/h:NominalRValue) = 1">element 'PerimeterInsulation/Layer[InstallationType="continuous"]/NominalRValue' is REQUIRED</sch:assert>
      <sch:assert test="count(h:UnderSlabInsulation/h:SystemIdentifier) = 1">element 'UnderSlabInsulation/SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:UnderSlabInsulation/h:Layer[h:InstallationType='continuous']/h:NominalRValue) = 1">element 'UnderSlabInsulation/Layer[InstallationType="continuous"]/NominalRValue' is REQUIRED</sch:assert>
      <sch:assert test="count(h:extension/h:CarpetFraction) = 1">element 'extension/CarpetFraction' is REQUIRED</sch:assert> <!-- 0 - 1 -->
      <sch:assert test="count(h:extension/h:CarpetRValue) = 1">element 'extension/CarpetRValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [Window] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Windows/h:Window">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) = 1">element 'Azimuth' is REQUIRED</sch:assert>
      <sch:assert test="count(h:UFactor) = 1">element 'UFactor' is REQUIRED</sch:assert>
      <sch:assert test="count(h:SHGC) = 1">element 'SHGC' is REQUIRED</sch:assert>
      <sch:assert test="count(h:InteriorShading/h:SummerShadingCoefficient) &lt;= 1">element 'InteriorShading/SummerShadingCoefficient' is OPTIONAL</sch:assert> <!-- Uses ERI assumption if not provided -->
      <sch:assert test="count(h:InteriorShading/h:WinterShadingCoefficient) &lt;= 1">element 'InteriorShading/WinterShadingCoefficient' is OPTIONAL</sch:assert> <!-- Uses ERI assumption if not provided -->
      <sch:assert test="count(h:Overhangs) &lt;= 1">element 'Overhangs' is OPTIONAL</sch:assert> <!-- See [WindowOverhang] -->
      <sch:assert test="count(h:FractionOperable) &lt;= 1">element 'FractionOperable' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:AttachedToWall) = 1">element 'AttachedToWall' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [WindowOverhang] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Windows/h:Window/h:Overhangs">
      <sch:assert test="count(h:Depth) = 1">element 'Depth' is REQUIRED</sch:assert> <!-- See [WindowOverhang] -->
      <sch:assert test="count(h:DistanceToTopOfWindow) = 1">element 'DistanceToTopOfWindow' is REQUIRED</sch:assert>
      <sch:assert test="count(h:DistanceToBottomOfWindow) = 1">element 'DistanceToBottomOfWindow' is REQUIRED</sch:assert>
    </sch:rule>"
    <!-- [Skylight] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Skylights/h:Skylight">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) = 1">element 'Azimuth' is REQUIRED</sch:assert>
      <sch:assert test="count(h:UFactor) = 1">element 'UFactor' is REQUIRED</sch:assert>
      <sch:assert test="count(h:SHGC) = 1">element 'SHGC' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AttachedToRoof) = 1">element 'AttachedToRoof' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [Door] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Enclosure/h:Doors/h:Door">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:AttachedToWall) = 1">element 'AttachedToWall' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Area) = 1">element 'Area' is REQUIRED</sch:assert>
      <sch:assert test="count(h:Azimuth) = 1">element 'Azimuth' is REQUIRED</sch:assert>
      <sch:assert test="count(h:RValue) = 1">element 'RValue' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingSystem] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert>
      <sch:assert test="count(../../h:HVACControl) = 1">element 'HVACControl' is REQUIRED</sch:assert> <!-- See [HVACControl] -->
      <sch:assert test="count(h:HeatingSystemType[h:ElectricResistance | h:Furnace | h:WallFurnace | h:FloorFurnace | h:Boiler | h:Stove | h:PortableHeater | h:Fireplace]) = 1">element 'HeatingSystemType' is REQUIRED</sch:assert> <!-- See [HeatingType=Resistance] or [HeatingType=Furnace] or [HeatingType=WallFurnace] or [HeatingType=FloorFurnace] or [HeatingType=Boiler] or [HeatingType=Stove] or [HeatingType=PortableHeater] or [HeatingType=Fireplace] -->
      <sch:assert test="count(h:HeatingCapacity) &lt;= 1">element 'HeatingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:FractionHeatLoadServed) = 1">element 'FractionHeatLoadServed' is REQUIRED</sch:assert> <!-- Must sum to <= 1 across all HeatingSystems and HeatPumps -->
      <sch:assert test="count(h:ElectricAuxiliaryEnergy) &lt;= 1">element 'ElectricAuxiliaryEnergy' is OPTIONAL</sch:assert> <!-- If not provided, uses 301 defaults for fuel furnace/boiler and zero otherwise -->
    </sch:rule>"
    <!-- [HeatingType=Resistance] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:ElectricResistance]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='electricity']) = 1">element 'HeatingSystemFuel[text()="electricity"]' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='Percent']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='Percent']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=Furnace] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:Furnace]">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">the number of element DistributionSystemType/AirDistribution or DistributionSystemType[Other='DSE'] MUST be greater than or equal to 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) = 1">element 'DistributionSystem' is REQUIRED</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='AFUE']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='AFUE']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=WallFurnace] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:WallFurnace]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='AFUE']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='AFUE']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=FloorFurnace] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:FloorFurnace]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='AFUE']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='AFUE']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=Boiler] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:Boiler]">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:HydronicDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">element '../../HVACDistribution[DistributionSystemType/HydronicDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than or equal to 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='AFUE']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='AFUE']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=Stove] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:Stove]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='Percent']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='Percent']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatingType=PortableHeater] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:PortableHeater]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='Percent']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='Percent']/Value' is REQUIRED</sch:assert>
    </sch:rule>"
    <!-- [HeatingType=Fireplace] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatingSystem[h:HeatingSystemType/h:Fireplace]">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:HeatingSystemFuel[text()='natural gas' or text()='fuel oil' or text()='propane' or text()='electricity' or text()='wood' or text()='wood pellets']) = 1">element 'HeatingSystemFuel' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='Percent']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='Percent']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [CoolingSystem] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(../../h:HVACControl) = 1">element 'HVACControl' is REQUIRED</sch:assert> <!-- See [HVACControl] -->
      <sch:assert test="count(h:CoolingSystemType[text()='central air conditioner' or text()='room air conditioner' or text()='evaporative cooler']) = 1">element 'CoolingSystemType[text()='central air conditioner' or text()='room air conditioner' or text()='evaporative cooler']' is REQUIRED</sch:assert> <!-- See [CoolingType=CentralAC] or [CoolingType=RoomAC] or [CoolingType=EvapCooler] -->
      <sch:assert test="count(h:CoolingSystemFuel[text()='electricity']) = 1">element 'CoolingSystemFuel[text()='electricity']' is REQUIRED</sch:assert>
      <sch:assert test="count(h:FractionCoolLoadServed) = 1">element 'FractionCoolLoadServed' is REQUIRED</sch:assert> <!-- Must sum to <= 1 across all CoolingSystems and HeatPumps -->
    </sch:rule>
    <!-- [CoolingType=CentralAC] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem[h:CoolingSystemType='central air conditioner']">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">element '../../HVACDistribution[DistributionSystemType/AirDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than or equal to 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) = 1">element 'DistributionSystem' is REQUIRED</sch:assert>
      <sch:assert test="count(h:CoolingCapacity) &lt;= 1">element 'CoolingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="not(h:CompressorType) or count(h:CompressorType[text()='single stage' or text()='two stage' or text()='variable speed']) = 1">element '[not(CompressorType)] | CompressorType[text()='single stage' or text()='two stage' or text()='variable speed']' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:AnnualCoolingEfficiency[h:Units='SEER']/h:Value) = 1">element 'AnnualCoolingEfficiency[Units='SEER']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:SensibleHeatFraction) &lt;= 1">element 'SensibleHeatFraction' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [CoolingType=RoomAC] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem[h:CoolingSystemType='room air conditioner']">
      <sch:assert test="count(h:DistributionSystem) = 0">element 'DistributionSystem' MUST be zero</sch:assert>
      <sch:assert test="count(h:CoolingCapacity) &lt;= 1">element 'CoolingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:AnnualCoolingEfficiency[h:Units='EER']/h:Value) = 1">element 'AnnualCoolingEfficiency[Units='EER']/Value' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:SensibleHeatFraction) &lt;= 1">element 'SensibleHeatFraction' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [CoolingType=EvapCooler] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:CoolingSystem[h:CoolingSystemType='evaporative cooler']">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 0">element '../../HVACDistribution[DistributionSystemType/AirDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than or equal to 0</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) &lt;= 1">element 'DistributionSystem' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:CoolingCapacity) = 0">element 'CoolingCapacity' MUST be zero</sch:assert>
    </sch:rule>
    <!-- [HeatPump] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(../../h:HVACControl) = 1">element '../../HVACControl' is REQUIRED</sch:assert> <!-- See [HVACControl] -->
      <sch:assert test="count(h:HeatPumpType[text()='air-to-air' or text()='mini-split' or text()='ground-to-air']) = 1">element 'HeatPumpType[text()='air-to-air' or text()='mini-split' or text()='ground-to-air']' is REQUIRED</sch:assert> <!-- See [HeatPumpType=ASHP] or [HeatPumpType=MSHP] or [HeatPumpType=GSHP] -->
      <sch:assert test="count(h:HeatPumpFuel[text()='electricity']) = 1">element 'HeatPumpFuel[text()='electricity']' is REQUIRED</sch:assert>
      <sch:assert test="count(h:HeatingCapacity) &lt;= 1">element 'HeatingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:CoolingCapacity) &lt;= 1">element 'CoolingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:CoolingSensibleHeatFraction) &lt;= 1">element 'CoolingSensibleHeatFraction' is OPTIONAL</sch:assert>
      <sch:assert test="not(h:BackupSystemFuel) or count(h:BackupSystemFuel[text()='electricity' or text()='natural gas' or text()='fuel oil' or text()='propane' or text()='wood' or text()='wood pellets']) = 1">element [not(BackupSystemFuel)] | BackupSystemFuel[text()='electricity' or text()='natural gas' or text()='fuel oil' or text()='propane' or text()='wood' or text()='wood pellets'] is OPTIONAL</sch:assert> <!-- See [HeatPumpBackup] -->
      <sch:assert test="count(h:FractionHeatLoadServed) = 1">element 'FractionHeatLoadServed' is REQUIRED</sch:assert> <!-- Must sum to <= 1 across all HeatPumps and HeatingSystems -->
      <sch:assert test="count(h:FractionCoolLoadServed) = 1">element 'FractionCoolLoadServed' is REQUIRED</sch:assert> <!-- Must sum to <= 1 across all HeatPumps and CoolingSystems -->
    </sch:rule>
    <!-- [HeatPumpType=ASHP] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump[h:HeatPumpType='air-to-air']">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">element '../../HVACDistribution[DistributionSystemType/AirDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) = 1">element 'DistributionSystem' is REQUIRED</sch:assert>
      <sch:assert test="not(h:CompressorType) or count(h:CompressorType[text()='single stage' or text()='two stage' or text()='variable speed']) = 1">element 'CompressorType' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:AnnualCoolingEfficiency[h:Units='SEER']/h:Value) = 1">element 'AnnualCoolingEfficiency[Units='SEER']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='HSPF']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='HSPF']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:HeatingCapacity17F) &lt;= 1">element 'HeatingCapacity17F' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [HeatPumpType=MSHP] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump[h:HeatPumpType='mini-split']">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">element '../../HVACDistribution[DistributionSystemType/AirDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) &lt;= 1">element 'DistributionSystem' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:AnnualCoolingEfficiency[h:Units='SEER']/h:Value) = 1">element 'AnnualCoolingEfficiency[Units='SEER']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='HSPF']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='HSPF']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:HeatingCapacity17F) &lt;= 1">element 'HeatingCapacity17F' is OPTIONAL</sch:assert>
    </sch:rule>
    <!-- [HeatPumpType=GSHP] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump[h:HeatPumpType='ground-to-air']">
      <sch:assert test="count(../../h:HVACDistribution[h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType[h:Other='DSE']]) &gt;= 1">element '../../HVACDistribution[DistributionSystemType/AirDistribution | DistributionSystemType[Other='DSE']]' MUST be greater than 1</sch:assert> <!-- See [HVACDistribution] -->
      <sch:assert test="count(h:DistributionSystem) = 1">element 'DistributionSystem' is REQUIRED</sch:assert>
      <sch:assert test="count(h:BackupHeatingSwitchoverTemperature) = 0">element 'BackupHeatingSwitchoverTemperature' MUST NOT be provided</sch:assert>
      <sch:assert test="count(h:AnnualCoolingEfficiency[h:Units='EER']/h:Value) = 1">element 'AnnualCoolingEfficiency[Units='SEER']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:AnnualHeatingEfficiency[h:Units='COP']/h:Value) = 1">element 'AnnualHeatingEfficiency[Units='HSPF']/Value' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [HeatPumpBackup] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACPlant/h:HeatPump[h:BackupSystemFuel]">
      <sch:assert test="count(h:BackupAnnualHeatingEfficiency[h:Units='Percent' or h:Units='AFUE']/h:Value) = 1">element 'BackupAnnualHeatingEfficiency[Units='Percent' or Units='AFUE']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:BackupHeatingCapacity) &lt;= 1">element 'BackupHeatingCapacity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:BackupHeatingSwitchoverTemperature) &lt;= 1">element 'BackupHeatingSwitchoverTemperature' is OPTIONAL</sch:assert> <!-- Use if dual-fuel heat pump -->
    </sch:rule>
    <!-- [HVACControl] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACControl">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:SetpointTempHeatingSeason) = 1">element 'SetpointTempHeatingSeason' is REQUIRED</sch:assert>
      <sch:assert test="count(h:SetbackTempHeatingSeason) &lt;= 1">element 'SetbackTempHeatingSeason' is OPTIONAL</sch:assert> <!-- See [HVACControlType=HeatingSetback] -->
      <sch:assert test="count(h:SetupTempCoolingSeason) &lt;= 1">element 'SetupTempCoolingSeason' is OPTIONAL</sch:assert> <!-- See See [HVACControlType=CoolingSetup] -->
      <sch:assert test="count(h:SetpointTempCoolingSeason) = 1">element 'SetpointTempCoolingSeason' is REQUIRED</sch:assert>
      <sch:assert test="count(h:extension/h:CeilingFanSetpointTempCoolingSeasonOffset) &lt;= 1">element 'extension/CeilingFanSetpointTempCoolingSeasonOffset' is REQUIRED</sch:assert> <!-- deg F -->
    </sch:rule>
    <!-- [HVACControlType=HeatingSetback] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACControl[h:SetbackTempHeatingSeason]">
      <sch:assert test="count(h:TotalSetbackHoursperWeekHeating) = 1">element 'TotalSetbackHoursperWeekHeating' is REQUIRED</sch:assert>
      <sch:assert test="count(h:extension/h:SetbackStartHourHeating) = 1">element 'extension/SetbackStartHourHeating' is REQUIRED</sch:assert> <!-- 0 = midnight. 12 = noon -->
    </sch:rule>
    <!-- [HVACControlType=CoolingSetup] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACControl[h:SetupTempCoolingSeason]">
      <sch:assert test="count(h:TotalSetupHoursperWeekCooling) = 1">element 'TotalSetupHoursperWeekCooling' is REQUIRED</sch:assert>
      <sch:assert test="count(h:extension/h:SetupStartHourCooling) = 1">element 'extension/SetupStartHourCooling' is REQUIRED</sch:assert> <!-- 0 = midnight. 12 = noon -->
    </sch:rule>
    <!-- [HVACDistribution] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:DistributionSystemType/h:AirDistribution | h:DistributionSystemType/h:HydronicDistribution | h:DistributionSystemType[h:Other='DSE']) = 1">element 'DistributionSystemType/AirDistribution | DistributionSystemType/HydronicDistribution | DistributionSystemType[Other='DSE']' is REQUIRED</sch:assert> <!-- See [HVACDistType=Air] or [HVACDistType=DSE] -->
    </sch:rule>
    <!-- [HVACDistType=Air] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution">
      <sch:assert test="count(../../h:ConditionedFloorAreaServed) = 1">element '../../ConditionedFloorAreaServed' is REQUIRED</sch:assert>
      <sch:assert test="count(h:DuctLeakageMeasurement[h:DuctType='supply']/h:DuctLeakage[(h:Units='CFM25' or h:Units='Percent') and h:TotalOrToOutside='to outside']/h:Value) = 1">element 'DuctLeakageMeasurement[DuctType='supply']/DuctLeakage[(Units='CFM25' or Units='Percent') and TotalOrToOutside='to outside']/Value' is REQUIRED</sch:assert>
      <sch:assert test="count(h:DuctLeakageMeasurement[h:DuctType='return']/h:DuctLeakage[(h:Units='CFM25' or h:Units='Percent') and h:TotalOrToOutside='to outside']/h:Value) &lt;= 1">element 'DuctLeakageMeasurement[DuctType='return']/DuctLeakage[(Units='CFM25' or Units='Percent') and TotalOrToOutside='to outside']/Value' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:Ducts[h:DuctType='supply']) &gt;= 0">element 'Ducts[DuctType='supply']' is OPTIONAL</sch:assert> <!-- See [HVACDuct] -->
      <sch:assert test="count(h:Ducts[h:DuctType='return']) &gt;= 0">element 'Ducts[DuctType='return']' is OPTIONAL</sch:assert> <!-- See [HVACDuct] -->
      <sch:assert test="count(h:NumberofReturnRegisters) &lt;= 1">element 'NumberofReturnRegisters' is OPTIONAL</sch:assert> <!-- See [HVACDuct] -->
    </sch:rule>
    <!-- [HVACDistType=DSE] -->
    <!-- WARNING: These inputs are unused and EnergyPlus output will NOT reflect the specified DSE. To account for DSE, apply the value to the EnergyPlus output. -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution[h:DistributionSystemType[h:Other='DSE']]">
      <sch:assert test="count(h:AnnualHeatingDistributionSystemEfficiency | h:AnnualCoolingDistributionSystemEfficiency) &gt;= 1">element 'AnnualHeatingDistributionSystemEfficiency | AnnualCoolingDistributionSystemEfficiency' MUST be greater than or equal to 1</sch:assert>
    </sch:rule>
    <!-- [HVACDuct] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:HVAC/h:HVACDistribution/h:DistributionSystemType/h:AirDistribution/h:Ducts[h:DuctType='supply' or h:DuctType='return']">
      <sch:assert test="count(h:DuctInsulationRValue) = 1">element 'DuctInsulationRValue' is REQUIRED</sch:assert>
      <sch:assert test="not(count(h:DuctSurfaceArea | h:DuctLocation[text()='living space' or text()='basement - conditioned' or text()='basement - unconditioned' or text()='crawlspace - vented' or text()='crawlspace - unvented' or text()='attic - vented' or text()='attic - unvented' or text()='garage' or text()='exterior wall' or text()='under slab' or text()='roof deck' or text()='outside' or text()='other housing unit' or text()='other heated space' or text()='other multifamily buffer space' or text()='other non-freezing space']) = 1)">both element 'DuctSurfaceArea' and 'DuctLocation' MUST be either blank or provided</sch:assert>
    </sch:rule>
    <!-- [MechanicalVentilation] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForWholeBuildingVentilation='true']">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:FanType[text()='energy recovery ventilator' or text()='heat recovery ventilator' or text()='exhaust only' or text()='supply only' or text()='balanced' or text()='central fan integrated supply']) = 1">element 'FanType' is REQUIRED</sch:assert> <!-- See [MechVentType=HRV] or [MechVentType=ERV] or [MechVentType=CFIS] -->
      <sch:assert test="count(h:TestedFlowRate | h:RatedFlowRate) &gt;= 1">element 'TestedFlowRate | RatedFlowRate' MUST be greater than or equal to 1</sch:assert>
      <sch:assert test="count(h:HoursInOperation) = 1">element 'HoursInOperation' is REQUIRED</sch:assert>
      <sch:assert test="count(h:FanPower) = 1">element 'FanPower' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [MechVentType=HRV] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForWholeBuildingVentilation='true' and h:FanType='heat recovery ventilator']">
      <sch:assert test="count(h:SensibleRecoveryEfficiency | h:AdjustedSensibleRecoveryEfficiency) = 1">element 'SensibleRecoveryEfficiency | AdjustedSensibleRecoveryEfficiency' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [MechVentType=ERV] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForWholeBuildingVentilation='true' and h:FanType='energy recovery ventilator']">
      <sch:assert test="count(h:TotalRecoveryEfficiency | h:AdjustedTotalRecoveryEfficiency) = 1">element 'TotalRecoveryEfficiency | AdjustedTotalRecoveryEfficiency' is REQUIRED</sch:assert>
      <sch:assert test="count(h:SensibleRecoveryEfficiency | h:AdjustedSensibleRecoveryEfficiency) = 1">element 'SensibleRecoveryEfficiency | AdjustedSensibleRecoveryEfficiency' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [MechVentType=CFIS] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForWholeBuildingVentilation='true' and h:FanType='central fan integrated supply']">
      <sch:assert test="count(h:AttachedToHVACDistributionSystem) = 1">element 'AttachedToHVACDistributionSystem' is REQUIRED</sch:assert>
    </sch:rule>
    <!-- [KitchenRangeFan] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForLocalVentilation='true' and h:FanLocation='kitchen']">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:RatedFlowRate) &lt;= 1">element 'RatedFlowRate' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:HoursInOperation) &lt;= 1">element 'HoursInOperation' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:FanPower) &lt;= 1">element 'FanPower' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:extension/h:StartHour) &lt;= 1">element 'extension/StartHour' is OPTIONAL</sch:assert> <!-- 0 = midnight. 12 = noon -->
    </sch:rule>
    <!-- [BathFan] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForLocalVentilation='true' and h:FanLocation='bath']">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:Quantity) &lt;= 1">element 'Quantity' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:RatedFlowRate) &lt;= 1">element 'RatedFlowRate' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:HoursInOperation) &lt;= 1">element 'HoursInOperation' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:FanPower) &lt;= 1">element 'FanPower' is OPTIONAL</sch:assert>
      <sch:assert test="count(h:extension/h:StartHour) &lt;= 1">element 'extension/StartHour' is OPTIONAL</sch:assert> <!-- 0 = midnight. 12 = noon -->
    </sch:rule>
    <!-- [WholeHouseFan] -->
    <sch:rule context="/h:HPXML/h:Building/h:BuildingDetails/h:Systems/h:MechanicalVentilation/h:VentilationFans/h:VentilationFan[h:UsedForSeasonalCoolingLoadReduction='true']">
      <sch:assert test="count(h:SystemIdentifier) = 1">element 'SystemIdentifier' is REQUIRED</sch:assert> <!-- Required by HPXML schema -->
      <sch:assert test="count(h:RatedFlowRate) = 1">element 'RatedFlowRate' is REQUIRED</sch:assert>
      <sch:assert test="count(h:FanPower) = 1">element 'FanPower' is REQUIRED</sch:assert>
    </sch:rule>
    


  </sch:pattern>
</sch:schema>